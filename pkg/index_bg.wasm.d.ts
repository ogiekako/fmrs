/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_backwardsearch_free: (a: number, b: number) => void;
export const backwardsearch_new: (a: number, b: number) => number;
export const backwardsearch_advance: (a: number) => number;
export const backwardsearch_step: (a: number) => number;
export const backwardsearch_sfen: (a: number) => [number, number];
export const __wbg_solver_free: (a: number, b: number) => void;
export const solver_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const solver_advance: (a: number) => [number, number, number];
export const solver_no_solution: (a: number) => number;
export const solver_solutions_found: (a: number) => number;
export const solver_solutions_sfen: (a: number) => [number, number];
export const solver_solutions_kif: (a: number) => [number, number];
export const solver_solutions_count: (a: number) => number;
export const solver_redundant: (a: number) => number;
export const solver_is_from_white: (a: number) => number;
export const greet: () => void;
export const display_single_compactmove: (a: number, b: number, c: number) => number;
export const display_single_compactmove_kansuji: (a: number, b: number, c: number) => number;
export const all_drop_checks_partial: (a: number, b: number, c: number) => void;
export const is_in_check_partial_lite: (a: number) => number;
export const legality_normal_check: (a: number, b: number, c: number, d: number) => number;
export const Game_position: (a: number) => number;
export const Game_resolve: (a: number, b: number) => void;
export const Game_unresolve: (a: number) => void;
export const Game_resolution: (a: number) => number;
export const PartialGame_position: (a: number) => number;
export const PartialGame_resolve: (a: number, b: number) => void;
export const PartialGame_unresolve: (a: number) => void;
export const PartialGame_resolution: (a: number) => number;
export const Position_inner: (a: number) => number;
export const Position_initial_position: (a: number) => number;
export const Position_startpos: () => number;
export const Position_destruct: (a: number) => void;
export const Position_side_to_move: (a: number) => number;
export const Position_hand_of_a_player: (a: number, b: number, c: number) => void;
export const Position_ply: (a: number) => number;
export const Position_piece_at: (a: number, b: number) => number;
export const Position_occupied_bitboard: (a: number, b: number) => void;
export const Position_vacant_bitboard: (a: number, b: number) => void;
export const Position_player_bitboard: (a: number, b: number, c: number) => void;
export const Position_piece_bitboard: (a: number, b: number, c: number) => void;
export const Position_last_compact_move: (a: number) => number;
export const Position_make_compact_move: (a: number, b: number) => number;
export const Position_to_sfen_c: (a: number, b: number) => void;
export const PartialPosition_to_sfen_c: (a: number, b: number) => void;
export const PartialPosition_startpos: (a: number) => void;
export const PartialPosition_side_to_move: (a: number) => number;
export const PartialPosition_hand_of_a_player: (a: number, b: number, c: number) => void;
export const PartialPosition_ply: (a: number) => number;
export const PartialPosition_piece_at: (a: number, b: number) => number;
export const PartialPosition_occupied_bitboard: (a: number, b: number) => void;
export const PartialPosition_vacant_bitboard: (a: number, b: number) => void;
export const PartialPosition_player_bitboard: (a: number, b: number, c: number) => void;
export const PartialPosition_piece_bitboard: (a: number, b: number, c: number) => void;
export const PartialPosition_piece_kind_bitboard: (a: number, b: number, c: number) => void;
export const PartialPosition_last_compact_move: (a: number) => number;
export const PartialPosition_make_compact_move: (a: number, b: number) => number;
export const Bitboard_empty: (a: number) => void;
export const Bitboard_single: (a: number, b: number) => void;
export const Bitboard_count: (a: bigint, b: bigint) => number;
export const Bitboard_is_empty: (a: bigint, b: bigint) => number;
export const Bitboard_contains: (a: bigint, b: bigint, c: number) => number;
export const Bitboard_flip: (a: number, b: bigint, c: bigint) => void;
export const Bitboard_pop: (a: number) => number;
export const Bitboard_bitand: (a: number, b: bigint, c: bigint, d: bigint, e: bigint) => void;
export const Bitboard_bitand_assign: (a: number, b: bigint, c: bigint) => void;
export const Bitboard_bitor: (a: number, b: bigint, c: bigint, d: bigint, e: bigint) => void;
export const Bitboard_bitor_assign: (a: number, b: bigint, c: bigint) => void;
export const Bitboard_bitxor: (a: number, b: bigint, c: bigint, d: bigint, e: bigint) => void;
export const Bitboard_bitxor_assign: (a: number, b: bigint, c: bigint) => void;
export const Bitboard_not: (a: number, b: bigint, c: bigint) => void;
export const Color_flip: (a: number) => number;
export const GameResolution_from_u8_unchecked: (a: number) => number;
export const Hand_new: (a: number) => void;
export const Hand_add: (a: number, b: number) => number;
export const Hand_remove: (a: number, b: number) => number;
export const Hand_count: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
export const Hand_is_hand_piece: (a: number) => number;
export const IllegalMoveKind_from_u8_unchecked: (a: number) => number;
export const CompactMove_normal: (a: number, b: number, c: number) => number;
export const CompactMove_drop: (a: number, b: number) => number;
export const CompactMove_from: (a: number) => number;
export const CompactMove_to: (a: number) => number;
export const CompactMove_is_promoting: (a: number) => number;
export const CompactMove_is_drop: (a: number) => number;
export const PieceKind_from_u8: (a: number) => number;
export const PieceKind_from_u8_unchecked: (a: number) => number;
export const PieceKind_promote: (a: number) => number;
export const PieceKind_unpromote: (a: number) => number;
export const Square_new: (a: number, b: number) => number;
export const Square_new_relative: (a: number, b: number, c: number) => number;
export const Square_file: (a: number) => number;
export const Square_rank: (a: number) => number;
export const Square_index: (a: number) => number;
export const Square_relative_rank: (a: number, b: number) => number;
export const Square_relative_file: (a: number, b: number) => number;
export const Square_flip: (a: number) => number;
export const Square_from_u8: (a: number) => number;
export const Square_from_u8_unchecked: (a: number) => number;
export const Square_shift: (a: number, b: number, c: number) => number;
export const Piece_new: (a: number, b: number) => number;
export const Piece_piece_kind: (a: number) => number;
export const Piece_color: (a: number) => number;
export const Piece_promote: (a: number) => number;
export const Piece_unpromote: (a: number) => number;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_3: WebAssembly.Table;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
