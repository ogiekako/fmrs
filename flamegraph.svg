<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="2500" height="1334" onload="init(evt)" viewBox="0 0 2500 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1334" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1317.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="2390" y="24.00">Search</text><text id="matched" x="2390" y="1317.00"> </text><svg id="frames" x="10" width="2480" total_samples="421"><g><title>alloc::alloc::exchange_malloc (2 samples, 0.48%)</title><rect x="0.0000%" y="421" width="0.4751%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.1200%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.48%)</title><rect x="0.0000%" y="405" width="0.4751%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.1200%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.48%)</title><rect x="0.0000%" y="389" width="0.4751%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.1200%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.48%)</title><rect x="0.0000%" y="373" width="0.4751%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.1200%" y="383.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.48%)</title><rect x="0.0000%" y="357" width="0.4751%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.1200%" y="367.50"></text></g><g><title>_int_malloc (1 samples, 0.24%)</title><rect x="0.2375%" y="341" width="0.2375%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3575%" y="351.50"></text></g><g><title>unlink_chunk (1 samples, 0.24%)</title><rect x="0.2375%" y="325" width="0.2375%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3575%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (25 samples, 5.94%)</title><rect x="0.4751%" y="421" width="5.9382%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="25"/><text x="0.5951%" y="431.50">alloc::collections..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (25 samples, 5.94%)</title><rect x="0.4751%" y="405" width="5.9382%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="25"/><text x="0.5951%" y="415.50">alloc::collections..</text></g><g><title>core::ptr::write (25 samples, 5.94%)</title><rect x="0.4751%" y="389" width="5.9382%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="25"/><text x="0.5951%" y="399.50">core::ptr::write</text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 5.94%)</title><rect x="0.4751%" y="373" width="5.9382%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="25"/><text x="0.5951%" y="383.50">__memmove_avx_unal..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.24%)</title><rect x="6.4133%" y="421" width="0.2375%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="1"/><text x="6.5333%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.24%)</title><rect x="6.4133%" y="405" width="0.2375%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="1"/><text x="6.5333%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.24%)</title><rect x="6.4133%" y="389" width="0.2375%" height="15" fill="rgb(206,188,39)" fg:x="27" fg:w="1"/><text x="6.5333%" y="399.50"></text></g><g><title>core::cmp::max (1 samples, 0.24%)</title><rect x="6.4133%" y="373" width="0.2375%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="1"/><text x="6.5333%" y="383.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.24%)</title><rect x="6.4133%" y="357" width="0.2375%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="1"/><text x="6.5333%" y="367.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.24%)</title><rect x="6.4133%" y="341" width="0.2375%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="1"/><text x="6.5333%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(fmrs::position::position::Position,fmrs::position::position::UndoToken)&gt;&gt; (1 samples, 0.24%)</title><rect x="6.6508%" y="421" width="0.2375%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="1"/><text x="6.7708%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="6.6508%" y="405" width="0.2375%" height="15" fill="rgb(221,200,47)" fg:x="28" fg:w="1"/><text x="6.7708%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(fmrs::position::position::Position,fmrs::position::position::UndoToken),alloc::alloc::Global&gt;&gt; (1 samples, 0.24%)</title><rect x="6.6508%" y="389" width="0.2375%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="1"/><text x="6.7708%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="6.6508%" y="373" width="0.2375%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="1"/><text x="6.7708%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(fmrs::position::position::Position,fmrs::position::position::UndoToken)&gt;&gt; (1 samples, 0.24%)</title><rect x="6.6508%" y="357" width="0.2375%" height="15" fill="rgb(235,183,28)" fg:x="28" fg:w="1"/><text x="6.7708%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="6.6508%" y="341" width="0.2375%" height="15" fill="rgb(221,5,38)" fg:x="28" fg:w="1"/><text x="6.7708%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.24%)</title><rect x="6.6508%" y="325" width="0.2375%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="1"/><text x="6.7708%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.24%)</title><rect x="6.6508%" y="309" width="0.2375%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="1"/><text x="6.7708%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.24%)</title><rect x="6.6508%" y="293" width="0.2375%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="1"/><text x="6.7708%" y="303.50"></text></g><g><title>malloc_consolidate (1 samples, 0.24%)</title><rect x="6.6508%" y="277" width="0.2375%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="1"/><text x="6.7708%" y="287.50"></text></g><g><title>__GI___libc_free (10 samples, 2.38%)</title><rect x="6.8884%" y="309" width="2.3753%" height="15" fill="rgb(238,160,17)" fg:x="29" fg:w="10"/><text x="7.0084%" y="319.50">__GI__..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;)&gt;&gt; (12 samples, 2.85%)</title><rect x="6.8884%" y="421" width="2.8504%" height="15" fill="rgb(214,148,48)" fg:x="29" fg:w="12"/><text x="7.0084%" y="431.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;)&gt; (12 samples, 2.85%)</title><rect x="6.8884%" y="405" width="2.8504%" height="15" fill="rgb(232,36,49)" fg:x="29" fg:w="12"/><text x="7.0084%" y="415.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;&gt; (12 samples, 2.85%)</title><rect x="6.8884%" y="389" width="2.8504%" height="15" fill="rgb(209,103,24)" fg:x="29" fg:w="12"/><text x="7.0084%" y="399.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fmrs::position::position::UndoToken&gt;&gt; (12 samples, 2.85%)</title><rect x="6.8884%" y="373" width="2.8504%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="12"/><text x="7.0084%" y="383.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 2.85%)</title><rect x="6.8884%" y="357" width="2.8504%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="12"/><text x="7.0084%" y="367.50">&lt;alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 2.85%)</title><rect x="6.8884%" y="341" width="2.8504%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="12"/><text x="7.0084%" y="351.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (12 samples, 2.85%)</title><rect x="6.8884%" y="325" width="2.8504%" height="15" fill="rgb(241,83,37)" fg:x="29" fg:w="12"/><text x="7.0084%" y="335.50">alloc::a..</text></g><g><title>_int_free (2 samples, 0.48%)</title><rect x="9.2637%" y="309" width="0.4751%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="2"/><text x="9.3837%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u64,(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;)&gt;&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="421" width="0.2375%" height="15" fill="rgb(226,3,54)" fg:x="41" fg:w="1"/><text x="9.8587%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u64,(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;),std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="405" width="0.2375%" height="15" fill="rgb(245,192,40)" fg:x="41" fg:w="1"/><text x="9.8587%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u64,(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;))&gt;&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="389" width="0.2375%" height="15" fill="rgb(238,167,29)" fg:x="41" fg:w="1"/><text x="9.8587%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="9.7387%" y="373" width="0.2375%" height="15" fill="rgb(232,182,51)" fg:x="41" fg:w="1"/><text x="9.8587%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (1 samples, 0.24%)</title><rect x="9.7387%" y="357" width="0.2375%" height="15" fill="rgb(231,60,39)" fg:x="41" fg:w="1"/><text x="9.8587%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.24%)</title><rect x="9.7387%" y="341" width="0.2375%" height="15" fill="rgb(208,69,12)" fg:x="41" fg:w="1"/><text x="9.8587%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.24%)</title><rect x="9.7387%" y="325" width="0.2375%" height="15" fill="rgb(235,93,37)" fg:x="41" fg:w="1"/><text x="9.8587%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u64,(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;))&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="309" width="0.2375%" height="15" fill="rgb(213,116,39)" fg:x="41" fg:w="1"/><text x="9.8587%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;)&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="293" width="0.2375%" height="15" fill="rgb(222,207,29)" fg:x="41" fg:w="1"/><text x="9.8587%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fmrs::position::position::UndoToken&gt;&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="277" width="0.2375%" height="15" fill="rgb(206,96,30)" fg:x="41" fg:w="1"/><text x="9.8587%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fmrs::position::position::UndoToken&gt;&gt; (1 samples, 0.24%)</title><rect x="9.7387%" y="261" width="0.2375%" height="15" fill="rgb(218,138,4)" fg:x="41" fg:w="1"/><text x="9.8587%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="9.7387%" y="245" width="0.2375%" height="15" fill="rgb(250,191,14)" fg:x="41" fg:w="1"/><text x="9.8587%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.24%)</title><rect x="9.7387%" y="229" width="0.2375%" height="15" fill="rgb(239,60,40)" fg:x="41" fg:w="1"/><text x="9.8587%" y="239.50"></text></g><g><title>gimli::read::unit::allow_section_offset (1 samples, 0.24%)</title><rect x="9.7387%" y="213" width="0.2375%" height="15" fill="rgb(206,27,48)" fg:x="41" fg:w="1"/><text x="9.8587%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (9 samples, 2.14%)</title><rect x="9.9762%" y="261" width="2.1378%" height="15" fill="rgb(225,35,8)" fg:x="42" fg:w="9"/><text x="10.0962%" y="271.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (9 samples, 2.14%)</title><rect x="9.9762%" y="245" width="2.1378%" height="15" fill="rgb(250,213,24)" fg:x="42" fg:w="9"/><text x="10.0962%" y="255.50">&lt;allo..</text></g><g><title>core::ptr::write (9 samples, 2.14%)</title><rect x="9.9762%" y="229" width="2.1378%" height="15" fill="rgb(247,123,22)" fg:x="42" fg:w="9"/><text x="10.0962%" y="239.50">core:..</text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 2.14%)</title><rect x="9.9762%" y="213" width="2.1378%" height="15" fill="rgb(231,138,38)" fg:x="42" fg:w="9"/><text x="10.0962%" y="223.50">__mem..</text></g><g><title>fmrs::position::position::Position::set (1 samples, 0.24%)</title><rect x="12.1140%" y="229" width="0.2375%" height="15" fill="rgb(231,145,46)" fg:x="51" fg:w="1"/><text x="12.2340%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 2.61%)</title><rect x="9.9762%" y="341" width="2.6128%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="11"/><text x="10.0962%" y="351.50">&lt;alloc:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11 samples, 2.61%)</title><rect x="9.9762%" y="325" width="2.6128%" height="15" fill="rgb(217,147,25)" fg:x="42" fg:w="11"/><text x="10.0962%" y="335.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 2.61%)</title><rect x="9.9762%" y="309" width="2.6128%" height="15" fill="rgb(247,81,37)" fg:x="42" fg:w="11"/><text x="10.0962%" y="319.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (11 samples, 2.61%)</title><rect x="9.9762%" y="293" width="2.6128%" height="15" fill="rgb(209,12,38)" fg:x="42" fg:w="11"/><text x="10.0962%" y="303.50">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (11 samples, 2.61%)</title><rect x="9.9762%" y="277" width="2.6128%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="11"/><text x="10.0962%" y="287.50">core::i..</text></g><g><title>fmrs::position::position::Position::next_positions::{{closure}} (2 samples, 0.48%)</title><rect x="12.1140%" y="261" width="0.4751%" height="15" fill="rgb(248,47,43)" fg:x="51" fg:w="2"/><text x="12.2340%" y="271.50"></text></g><g><title>fmrs::position::position::Position::do_move (2 samples, 0.48%)</title><rect x="12.1140%" y="245" width="0.4751%" height="15" fill="rgb(221,10,30)" fg:x="51" fg:w="2"/><text x="12.2340%" y="255.50"></text></g><g><title>fmrs::position::position::Position::unset (1 samples, 0.24%)</title><rect x="12.3515%" y="229" width="0.2375%" height="15" fill="rgb(210,229,1)" fg:x="52" fg:w="1"/><text x="12.4715%" y="239.50"></text></g><g><title>fmrs::position::bitboard::BitBoard::unset (1 samples, 0.24%)</title><rect x="12.3515%" y="213" width="0.2375%" height="15" fill="rgb(222,148,37)" fg:x="52" fg:w="1"/><text x="12.4715%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.71%)</title><rect x="12.5891%" y="341" width="0.7126%" height="15" fill="rgb(234,67,33)" fg:x="53" fg:w="3"/><text x="12.7091%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (3 samples, 0.71%)</title><rect x="12.5891%" y="325" width="0.7126%" height="15" fill="rgb(247,98,35)" fg:x="53" fg:w="3"/><text x="12.7091%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (19 samples, 4.51%)</title><rect x="9.9762%" y="405" width="4.5131%" height="15" fill="rgb(247,138,52)" fg:x="42" fg:w="19"/><text x="10.0962%" y="415.50">core::iter::t..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (19 samples, 4.51%)</title><rect x="9.9762%" y="389" width="4.5131%" height="15" fill="rgb(213,79,30)" fg:x="42" fg:w="19"/><text x="10.0962%" y="399.50">&lt;alloc::vec::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 4.51%)</title><rect x="9.9762%" y="373" width="4.5131%" height="15" fill="rgb(246,177,23)" fg:x="42" fg:w="19"/><text x="10.0962%" y="383.50">&lt;alloc::vec::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 4.51%)</title><rect x="9.9762%" y="357" width="4.5131%" height="15" fill="rgb(230,62,27)" fg:x="42" fg:w="19"/><text x="10.0962%" y="367.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 1.19%)</title><rect x="13.3017%" y="341" width="1.1876%" height="15" fill="rgb(216,154,8)" fg:x="56" fg:w="5"/><text x="13.4217%" y="351.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 1.19%)</title><rect x="13.3017%" y="325" width="1.1876%" height="15" fill="rgb(244,35,45)" fg:x="56" fg:w="5"/><text x="13.4217%" y="335.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 1.19%)</title><rect x="13.3017%" y="309" width="1.1876%" height="15" fill="rgb(251,115,12)" fg:x="56" fg:w="5"/><text x="13.4217%" y="319.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 1.19%)</title><rect x="13.3017%" y="293" width="1.1876%" height="15" fill="rgb(240,54,50)" fg:x="56" fg:w="5"/><text x="13.4217%" y="303.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 1.19%)</title><rect x="13.3017%" y="277" width="1.1876%" height="15" fill="rgb(233,84,52)" fg:x="56" fg:w="5"/><text x="13.4217%" y="287.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 1.19%)</title><rect x="13.3017%" y="261" width="1.1876%" height="15" fill="rgb(207,117,47)" fg:x="56" fg:w="5"/><text x="13.4217%" y="271.50">al..</text></g><g><title>alloc::alloc::alloc (5 samples, 1.19%)</title><rect x="13.3017%" y="245" width="1.1876%" height="15" fill="rgb(249,43,39)" fg:x="56" fg:w="5"/><text x="13.4217%" y="255.50">al..</text></g><g><title>__GI___libc_malloc (4 samples, 0.95%)</title><rect x="13.5392%" y="229" width="0.9501%" height="15" fill="rgb(209,38,44)" fg:x="57" fg:w="4"/><text x="13.6592%" y="239.50">_..</text></g><g><title>_int_malloc (4 samples, 0.95%)</title><rect x="13.5392%" y="213" width="0.9501%" height="15" fill="rgb(236,212,23)" fg:x="57" fg:w="4"/><text x="13.6592%" y="223.50">_..</text></g><g><title>malloc_consolidate (1 samples, 0.24%)</title><rect x="14.2518%" y="197" width="0.2375%" height="15" fill="rgb(242,79,21)" fg:x="60" fg:w="1"/><text x="14.3718%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;fmrs::position::movement::Movement&gt;&gt; (2 samples, 0.48%)</title><rect x="14.4893%" y="405" width="0.4751%" height="15" fill="rgb(211,96,35)" fg:x="61" fg:w="2"/><text x="14.6093%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;fmrs::position::movement::Movement&gt;&gt; (2 samples, 0.48%)</title><rect x="14.4893%" y="389" width="0.4751%" height="15" fill="rgb(253,215,40)" fg:x="61" fg:w="2"/><text x="14.6093%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.48%)</title><rect x="14.4893%" y="373" width="0.4751%" height="15" fill="rgb(211,81,21)" fg:x="61" fg:w="2"/><text x="14.6093%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.48%)</title><rect x="14.4893%" y="357" width="0.4751%" height="15" fill="rgb(208,190,38)" fg:x="61" fg:w="2"/><text x="14.6093%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.48%)</title><rect x="14.4893%" y="341" width="0.4751%" height="15" fill="rgb(235,213,38)" fg:x="61" fg:w="2"/><text x="14.6093%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 11.88%)</title><rect x="14.9644%" y="389" width="11.8765%" height="15" fill="rgb(237,122,38)" fg:x="63" fg:w="50"/><text x="15.0844%" y="399.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; a..</text></g><g><title>core::ptr::read (50 samples, 11.88%)</title><rect x="14.9644%" y="373" width="11.8765%" height="15" fill="rgb(244,218,35)" fg:x="63" fg:w="50"/><text x="15.0844%" y="383.50">core::ptr::read</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.48%)</title><rect x="26.8409%" y="389" width="0.4751%" height="15" fill="rgb(240,68,47)" fg:x="113" fg:w="2"/><text x="26.9609%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.48%)</title><rect x="26.8409%" y="373" width="0.4751%" height="15" fill="rgb(210,16,53)" fg:x="113" fg:w="2"/><text x="26.9609%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.48%)</title><rect x="26.8409%" y="357" width="0.4751%" height="15" fill="rgb(235,124,12)" fg:x="113" fg:w="2"/><text x="26.9609%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 3.09%)</title><rect x="27.7910%" y="325" width="3.0879%" height="15" fill="rgb(224,169,11)" fg:x="117" fg:w="13"/><text x="27.9110%" y="335.50">&lt;alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13 samples, 3.09%)</title><rect x="27.7910%" y="309" width="3.0879%" height="15" fill="rgb(250,166,2)" fg:x="117" fg:w="13"/><text x="27.9110%" y="319.50">alloc::v..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 3.09%)</title><rect x="27.7910%" y="293" width="3.0879%" height="15" fill="rgb(242,216,29)" fg:x="117" fg:w="13"/><text x="27.9110%" y="303.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 3.09%)</title><rect x="27.7910%" y="277" width="3.0879%" height="15" fill="rgb(230,116,27)" fg:x="117" fg:w="13"/><text x="27.9110%" y="287.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.66%)</title><rect x="29.2162%" y="261" width="1.6627%" height="15" fill="rgb(228,99,48)" fg:x="123" fg:w="7"/><text x="29.3362%" y="271.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (7 samples, 1.66%)</title><rect x="29.2162%" y="245" width="1.6627%" height="15" fill="rgb(253,11,6)" fg:x="123" fg:w="7"/><text x="29.3362%" y="255.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.66%)</title><rect x="29.2162%" y="229" width="1.6627%" height="15" fill="rgb(247,143,39)" fg:x="123" fg:w="7"/><text x="29.3362%" y="239.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 1.66%)</title><rect x="29.2162%" y="213" width="1.6627%" height="15" fill="rgb(236,97,10)" fg:x="123" fg:w="7"/><text x="29.3362%" y="223.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (7 samples, 1.66%)</title><rect x="29.2162%" y="197" width="1.6627%" height="15" fill="rgb(233,208,19)" fg:x="123" fg:w="7"/><text x="29.3362%" y="207.50">cor..</text></g><g><title>fmrs::position::position::Position::attackers_to::{{closure}} (7 samples, 1.66%)</title><rect x="29.2162%" y="181" width="1.6627%" height="15" fill="rgb(216,164,2)" fg:x="123" fg:w="7"/><text x="29.3362%" y="191.50">fmr..</text></g><g><title>fmrs::position::bitboard::movable_positions (7 samples, 1.66%)</title><rect x="29.2162%" y="165" width="1.6627%" height="15" fill="rgb(220,129,5)" fg:x="123" fg:w="7"/><text x="29.3362%" y="175.50">fmr..</text></g><g><title>fmrs::position::bitboard::lance_movable_positions (7 samples, 1.66%)</title><rect x="29.2162%" y="149" width="1.6627%" height="15" fill="rgb(242,17,10)" fg:x="123" fg:w="7"/><text x="29.3362%" y="159.50">fmr..</text></g><g><title>fmrs::position::bitboard::attacks_from (7 samples, 1.66%)</title><rect x="29.2162%" y="133" width="1.6627%" height="15" fill="rgb(242,107,0)" fg:x="123" fg:w="7"/><text x="29.3362%" y="143.50">fmr..</text></g><g><title>&lt;fmrs::position::bitboard::ATTACKS as core::ops::deref::Deref&gt;::deref (7 samples, 1.66%)</title><rect x="29.2162%" y="117" width="1.6627%" height="15" fill="rgb(251,28,31)" fg:x="123" fg:w="7"/><text x="29.3362%" y="127.50">&lt;fm..</text></g><g><title>&lt;fmrs::position::bitboard::ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (7 samples, 1.66%)</title><rect x="29.2162%" y="101" width="1.6627%" height="15" fill="rgb(233,223,10)" fg:x="123" fg:w="7"/><text x="29.3362%" y="111.50">&lt;fm..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (7 samples, 1.66%)</title><rect x="29.2162%" y="85" width="1.6627%" height="15" fill="rgb(215,21,27)" fg:x="123" fg:w="7"/><text x="29.3362%" y="95.50">laz..</text></g><g><title>fmrs::position::bitboard::attacks_from (3 samples, 0.71%)</title><rect x="30.8789%" y="181" width="0.7126%" height="15" fill="rgb(232,23,21)" fg:x="130" fg:w="3"/><text x="30.9989%" y="191.50"></text></g><g><title>&lt;fmrs::position::bitboard::ATTACKS as core::ops::deref::Deref&gt;::deref (3 samples, 0.71%)</title><rect x="30.8789%" y="165" width="0.7126%" height="15" fill="rgb(244,5,23)" fg:x="130" fg:w="3"/><text x="30.9989%" y="175.50"></text></g><g><title>&lt;fmrs::position::bitboard::ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (3 samples, 0.71%)</title><rect x="30.8789%" y="149" width="0.7126%" height="15" fill="rgb(226,81,46)" fg:x="130" fg:w="3"/><text x="30.9989%" y="159.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (3 samples, 0.71%)</title><rect x="30.8789%" y="133" width="0.7126%" height="15" fill="rgb(247,70,30)" fg:x="130" fg:w="3"/><text x="30.9989%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 4.51%)</title><rect x="27.3159%" y="357" width="4.5131%" height="15" fill="rgb(212,68,19)" fg:x="115" fg:w="19"/><text x="27.4359%" y="367.50">&lt;alloc::vec::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17 samples, 4.04%)</title><rect x="27.7910%" y="341" width="4.0380%" height="15" fill="rgb(240,187,13)" fg:x="117" fg:w="17"/><text x="27.9110%" y="351.50">&lt;alloc::vec:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.95%)</title><rect x="30.8789%" y="325" width="0.9501%" height="15" fill="rgb(223,113,26)" fg:x="130" fg:w="4"/><text x="30.9989%" y="335.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.95%)</title><rect x="30.8789%" y="309" width="0.9501%" height="15" fill="rgb(206,192,2)" fg:x="130" fg:w="4"/><text x="30.9989%" y="319.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.95%)</title><rect x="30.8789%" y="293" width="0.9501%" height="15" fill="rgb(241,108,4)" fg:x="130" fg:w="4"/><text x="30.9989%" y="303.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (4 samples, 0.95%)</title><rect x="30.8789%" y="277" width="0.9501%" height="15" fill="rgb(247,173,49)" fg:x="130" fg:w="4"/><text x="30.9989%" y="287.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.95%)</title><rect x="30.8789%" y="261" width="0.9501%" height="15" fill="rgb(224,114,35)" fg:x="130" fg:w="4"/><text x="30.9989%" y="271.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.95%)</title><rect x="30.8789%" y="245" width="0.9501%" height="15" fill="rgb(245,159,27)" fg:x="130" fg:w="4"/><text x="30.9989%" y="255.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.95%)</title><rect x="30.8789%" y="229" width="0.9501%" height="15" fill="rgb(245,172,44)" fg:x="130" fg:w="4"/><text x="30.9989%" y="239.50">c..</text></g><g><title>fmrs::position::position::Position::attackers_to::{{closure}} (4 samples, 0.95%)</title><rect x="30.8789%" y="213" width="0.9501%" height="15" fill="rgb(236,23,11)" fg:x="130" fg:w="4"/><text x="30.9989%" y="223.50">f..</text></g><g><title>fmrs::position::bitboard::movable_positions (4 samples, 0.95%)</title><rect x="30.8789%" y="197" width="0.9501%" height="15" fill="rgb(205,117,38)" fg:x="130" fg:w="4"/><text x="30.9989%" y="207.50">f..</text></g><g><title>fmrs::position::bitboard::movable_positions (1 samples, 0.24%)</title><rect x="31.5914%" y="181" width="0.2375%" height="15" fill="rgb(237,72,25)" fg:x="133" fg:w="1"/><text x="31.7114%" y="191.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 1.66%)</title><rect x="31.8290%" y="229" width="1.6627%" height="15" fill="rgb(244,70,9)" fg:x="134" fg:w="7"/><text x="31.9490%" y="239.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 4.04%)</title><rect x="31.8290%" y="293" width="4.0380%" height="15" fill="rgb(217,125,39)" fg:x="134" fg:w="17"/><text x="31.9490%" y="303.50">&lt;core::iter:..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 4.04%)</title><rect x="31.8290%" y="277" width="4.0380%" height="15" fill="rgb(235,36,10)" fg:x="134" fg:w="17"/><text x="31.9490%" y="287.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::find (17 samples, 4.04%)</title><rect x="31.8290%" y="261" width="4.0380%" height="15" fill="rgb(251,123,47)" fg:x="134" fg:w="17"/><text x="31.9490%" y="271.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 4.04%)</title><rect x="31.8290%" y="245" width="4.0380%" height="15" fill="rgb(221,13,13)" fg:x="134" fg:w="17"/><text x="31.9490%" y="255.50">core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (10 samples, 2.38%)</title><rect x="33.4917%" y="229" width="2.3753%" height="15" fill="rgb(238,131,9)" fg:x="141" fg:w="10"/><text x="33.6117%" y="239.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (10 samples, 2.38%)</title><rect x="33.4917%" y="213" width="2.3753%" height="15" fill="rgb(211,50,8)" fg:x="141" fg:w="10"/><text x="33.6117%" y="223.50">core::..</text></g><g><title>fmrs::position::position::Position::move_candidates::{{closure}} (10 samples, 2.38%)</title><rect x="33.4917%" y="197" width="2.3753%" height="15" fill="rgb(245,182,24)" fg:x="141" fg:w="10"/><text x="33.6117%" y="207.50">fmrs::..</text></g><g><title>fmrs::position::position::Position::move_candidates::{{closure}} (10 samples, 2.38%)</title><rect x="33.4917%" y="181" width="2.3753%" height="15" fill="rgb(242,14,37)" fg:x="141" fg:w="10"/><text x="33.6117%" y="191.50">fmrs::..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 2.38%)</title><rect x="33.4917%" y="165" width="2.3753%" height="15" fill="rgb(246,228,12)" fg:x="141" fg:w="10"/><text x="33.6117%" y="175.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 2.38%)</title><rect x="33.4917%" y="149" width="2.3753%" height="15" fill="rgb(213,55,15)" fg:x="141" fg:w="10"/><text x="33.6117%" y="159.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 2.38%)</title><rect x="33.4917%" y="133" width="2.3753%" height="15" fill="rgb(209,9,3)" fg:x="141" fg:w="10"/><text x="33.6117%" y="143.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (10 samples, 2.38%)</title><rect x="33.4917%" y="117" width="2.3753%" height="15" fill="rgb(230,59,30)" fg:x="141" fg:w="10"/><text x="33.6117%" y="127.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 2.38%)</title><rect x="33.4917%" y="101" width="2.3753%" height="15" fill="rgb(209,121,21)" fg:x="141" fg:w="10"/><text x="33.6117%" y="111.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 2.38%)</title><rect x="33.4917%" y="85" width="2.3753%" height="15" fill="rgb(220,109,13)" fg:x="141" fg:w="10"/><text x="33.6117%" y="95.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10 samples, 2.38%)</title><rect x="33.4917%" y="69" width="2.3753%" height="15" fill="rgb(232,18,1)" fg:x="141" fg:w="10"/><text x="33.6117%" y="79.50">core::..</text></g><g><title>fmrs::position::position::Position::attackers_to_with_king::{{closure}} (10 samples, 2.38%)</title><rect x="33.4917%" y="53" width="2.3753%" height="15" fill="rgb(215,41,42)" fg:x="141" fg:w="10"/><text x="33.6117%" y="63.50">fmrs::..</text></g><g><title>fmrs::position::bitboard::movable_positions (10 samples, 2.38%)</title><rect x="33.4917%" y="37" width="2.3753%" height="15" fill="rgb(224,123,36)" fg:x="141" fg:w="10"/><text x="33.6117%" y="47.50">fmrs::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.24%)</title><rect x="35.8670%" y="293" width="0.2375%" height="15" fill="rgb(240,125,3)" fg:x="151" fg:w="1"/><text x="35.9870%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.24%)</title><rect x="35.8670%" y="277" width="0.2375%" height="15" fill="rgb(205,98,50)" fg:x="151" fg:w="1"/><text x="35.9870%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.24%)</title><rect x="35.8670%" y="261" width="0.2375%" height="15" fill="rgb(205,185,37)" fg:x="151" fg:w="1"/><text x="35.9870%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.24%)</title><rect x="35.8670%" y="245" width="0.2375%" height="15" fill="rgb(238,207,15)" fg:x="151" fg:w="1"/><text x="35.9870%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.24%)</title><rect x="35.8670%" y="229" width="0.2375%" height="15" fill="rgb(213,199,42)" fg:x="151" fg:w="1"/><text x="35.9870%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.24%)</title><rect x="35.8670%" y="213" width="0.2375%" height="15" fill="rgb(235,201,11)" fg:x="151" fg:w="1"/><text x="35.9870%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.24%)</title><rect x="35.8670%" y="197" width="0.2375%" height="15" fill="rgb(207,46,11)" fg:x="151" fg:w="1"/><text x="35.9870%" y="207.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.24%)</title><rect x="35.8670%" y="181" width="0.2375%" height="15" fill="rgb(241,35,35)" fg:x="151" fg:w="1"/><text x="35.9870%" y="191.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.24%)</title><rect x="35.8670%" y="165" width="0.2375%" height="15" fill="rgb(243,32,47)" fg:x="151" fg:w="1"/><text x="35.9870%" y="175.50"></text></g><g><title>_int_realloc (1 samples, 0.24%)</title><rect x="35.8670%" y="149" width="0.2375%" height="15" fill="rgb(247,202,23)" fg:x="151" fg:w="1"/><text x="35.9870%" y="159.50"></text></g><g><title>_int_malloc (1 samples, 0.24%)</title><rect x="35.8670%" y="133" width="0.2375%" height="15" fill="rgb(219,102,11)" fg:x="151" fg:w="1"/><text x="35.9870%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (19 samples, 4.51%)</title><rect x="31.8290%" y="325" width="4.5131%" height="15" fill="rgb(243,110,44)" fg:x="134" fg:w="19"/><text x="31.9490%" y="335.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (19 samples, 4.51%)</title><rect x="31.8290%" y="309" width="4.5131%" height="15" fill="rgb(222,74,54)" fg:x="134" fg:w="19"/><text x="31.9490%" y="319.50">alloc::vec::V..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;(fmrs::position::movement::Movement,fmrs::piece::Kind)&gt;,fmrs::position::position::Position::move_candidates::{{closure}}&gt;,fmrs::position::position::Position::move_candidates::{{closure}}&gt;&gt; (1 samples, 0.24%)</title><rect x="36.1045%" y="293" width="0.2375%" height="15" fill="rgb(216,99,12)" fg:x="152" fg:w="1"/><text x="36.2245%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter::Filter&lt;alloc::vec::into_iter::IntoIter&lt;(fmrs::position::movement::Movement,fmrs::piece::Kind)&gt;,fmrs::position::position::Position::move_candidates::{{closure}}&gt;&gt; (1 samples, 0.24%)</title><rect x="36.1045%" y="277" width="0.2375%" height="15" fill="rgb(226,22,26)" fg:x="152" fg:w="1"/><text x="36.2245%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(fmrs::position::movement::Movement,fmrs::piece::Kind)&gt;&gt; (1 samples, 0.24%)</title><rect x="36.1045%" y="261" width="0.2375%" height="15" fill="rgb(217,163,10)" fg:x="152" fg:w="1"/><text x="36.2245%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="36.1045%" y="245" width="0.2375%" height="15" fill="rgb(213,25,53)" fg:x="152" fg:w="1"/><text x="36.2245%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(fmrs::position::movement::Movement,fmrs::piece::Kind),alloc::alloc::Global&gt;&gt; (1 samples, 0.24%)</title><rect x="36.1045%" y="229" width="0.2375%" height="15" fill="rgb(252,105,26)" fg:x="152" fg:w="1"/><text x="36.2245%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="36.1045%" y="213" width="0.2375%" height="15" fill="rgb(220,39,43)" fg:x="152" fg:w="1"/><text x="36.2245%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(fmrs::position::movement::Movement,fmrs::piece::Kind)&gt;&gt; (1 samples, 0.24%)</title><rect x="36.1045%" y="197" width="0.2375%" height="15" fill="rgb(229,68,48)" fg:x="152" fg:w="1"/><text x="36.2245%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="36.1045%" y="181" width="0.2375%" height="15" fill="rgb(252,8,32)" fg:x="152" fg:w="1"/><text x="36.2245%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.24%)</title><rect x="36.1045%" y="165" width="0.2375%" height="15" fill="rgb(223,20,43)" fg:x="152" fg:w="1"/><text x="36.2245%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.24%)</title><rect x="36.1045%" y="149" width="0.2375%" height="15" fill="rgb(229,81,49)" fg:x="152" fg:w="1"/><text x="36.2245%" y="159.50"></text></g><g><title>_int_free (1 samples, 0.24%)</title><rect x="36.1045%" y="133" width="0.2375%" height="15" fill="rgb(236,28,36)" fg:x="152" fg:w="1"/><text x="36.2245%" y="143.50"></text></g><g><title>fmrs::position::bitboard::attacks_from (7 samples, 1.66%)</title><rect x="37.2922%" y="53" width="1.6627%" height="15" fill="rgb(249,185,26)" fg:x="157" fg:w="7"/><text x="37.4122%" y="63.50">fmr..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 2.14%)</title><rect x="37.2922%" y="197" width="2.1378%" height="15" fill="rgb(249,174,33)" fg:x="157" fg:w="9"/><text x="37.4122%" y="207.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 2.14%)</title><rect x="37.2922%" y="181" width="2.1378%" height="15" fill="rgb(233,201,37)" fg:x="157" fg:w="9"/><text x="37.4122%" y="191.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 2.14%)</title><rect x="37.2922%" y="165" width="2.1378%" height="15" fill="rgb(221,78,26)" fg:x="157" fg:w="9"/><text x="37.4122%" y="175.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (9 samples, 2.14%)</title><rect x="37.2922%" y="149" width="2.1378%" height="15" fill="rgb(250,127,30)" fg:x="157" fg:w="9"/><text x="37.4122%" y="159.50">&lt;core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 2.14%)</title><rect x="37.2922%" y="133" width="2.1378%" height="15" fill="rgb(230,49,44)" fg:x="157" fg:w="9"/><text x="37.4122%" y="143.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 2.14%)</title><rect x="37.2922%" y="117" width="2.1378%" height="15" fill="rgb(229,67,23)" fg:x="157" fg:w="9"/><text x="37.4122%" y="127.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 2.14%)</title><rect x="37.2922%" y="101" width="2.1378%" height="15" fill="rgb(249,83,47)" fg:x="157" fg:w="9"/><text x="37.4122%" y="111.50">core:..</text></g><g><title>fmrs::position::position::Position::attackers_to_with_king::{{closure}} (9 samples, 2.14%)</title><rect x="37.2922%" y="85" width="2.1378%" height="15" fill="rgb(215,43,3)" fg:x="157" fg:w="9"/><text x="37.4122%" y="95.50">fmrs:..</text></g><g><title>fmrs::position::bitboard::movable_positions (9 samples, 2.14%)</title><rect x="37.2922%" y="69" width="2.1378%" height="15" fill="rgb(238,154,13)" fg:x="157" fg:w="9"/><text x="37.4122%" y="79.50">fmrs:..</text></g><g><title>fmrs::position::bitboard::movable_positions (2 samples, 0.48%)</title><rect x="38.9549%" y="53" width="0.4751%" height="15" fill="rgb(219,56,2)" fg:x="164" fg:w="2"/><text x="39.0749%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 3.33%)</title><rect x="36.3420%" y="325" width="3.3254%" height="15" fill="rgb(233,0,4)" fg:x="153" fg:w="14"/><text x="36.4620%" y="335.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 3.33%)</title><rect x="36.3420%" y="309" width="3.3254%" height="15" fill="rgb(235,30,7)" fg:x="153" fg:w="14"/><text x="36.4620%" y="319.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::find (14 samples, 3.33%)</title><rect x="36.3420%" y="293" width="3.3254%" height="15" fill="rgb(250,79,13)" fg:x="153" fg:w="14"/><text x="36.4620%" y="303.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 3.33%)</title><rect x="36.3420%" y="277" width="3.3254%" height="15" fill="rgb(211,146,34)" fg:x="153" fg:w="14"/><text x="36.4620%" y="287.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (14 samples, 3.33%)</title><rect x="36.3420%" y="261" width="3.3254%" height="15" fill="rgb(228,22,38)" fg:x="153" fg:w="14"/><text x="36.4620%" y="271.50">core::ite..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 3.33%)</title><rect x="36.3420%" y="245" width="3.3254%" height="15" fill="rgb(235,168,5)" fg:x="153" fg:w="14"/><text x="36.4620%" y="255.50">core::ops..</text></g><g><title>fmrs::position::position::Position::move_candidates::{{closure}} (14 samples, 3.33%)</title><rect x="36.3420%" y="229" width="3.3254%" height="15" fill="rgb(221,155,16)" fg:x="153" fg:w="14"/><text x="36.4620%" y="239.50">fmrs::pos..</text></g><g><title>fmrs::position::position::Position::move_candidates::{{closure}} (10 samples, 2.38%)</title><rect x="37.2922%" y="213" width="2.3753%" height="15" fill="rgb(215,215,53)" fg:x="157" fg:w="10"/><text x="37.4122%" y="223.50">fmrs::..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.24%)</title><rect x="39.4299%" y="197" width="0.2375%" height="15" fill="rgb(223,4,10)" fg:x="166" fg:w="1"/><text x="39.5499%" y="207.50"></text></g><g><title>fmrs::position::position::Position::move_candidates::{{closure}}::{{closure}} (1 samples, 0.24%)</title><rect x="39.4299%" y="181" width="0.2375%" height="15" fill="rgb(234,103,6)" fg:x="166" fg:w="1"/><text x="39.5499%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.24%)</title><rect x="39.4299%" y="165" width="0.2375%" height="15" fill="rgb(227,97,0)" fg:x="166" fg:w="1"/><text x="39.5499%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.24%)</title><rect x="39.4299%" y="149" width="0.2375%" height="15" fill="rgb(234,150,53)" fg:x="166" fg:w="1"/><text x="39.5499%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.24%)</title><rect x="39.4299%" y="133" width="0.2375%" height="15" fill="rgb(228,201,54)" fg:x="166" fg:w="1"/><text x="39.5499%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.24%)</title><rect x="39.4299%" y="117" width="0.2375%" height="15" fill="rgb(222,22,37)" fg:x="166" fg:w="1"/><text x="39.5499%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.24%)</title><rect x="39.4299%" y="101" width="0.2375%" height="15" fill="rgb(237,53,32)" fg:x="166" fg:w="1"/><text x="39.5499%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.24%)</title><rect x="39.4299%" y="85" width="0.2375%" height="15" fill="rgb(233,25,53)" fg:x="166" fg:w="1"/><text x="39.5499%" y="95.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.24%)</title><rect x="39.6675%" y="213" width="0.2375%" height="15" fill="rgb(210,40,34)" fg:x="167" fg:w="1"/><text x="39.7875%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (54 samples, 12.83%)</title><rect x="27.3159%" y="389" width="12.8266%" height="15" fill="rgb(241,220,44)" fg:x="115" fg:w="54"/><text x="27.4359%" y="399.50">core::iter::traits::iterator::Iterator::col..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (54 samples, 12.83%)</title><rect x="27.3159%" y="373" width="12.8266%" height="15" fill="rgb(235,28,35)" fg:x="115" fg:w="54"/><text x="27.4359%" y="383.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (35 samples, 8.31%)</title><rect x="31.8290%" y="357" width="8.3135%" height="15" fill="rgb(210,56,17)" fg:x="134" fg:w="35"/><text x="31.9490%" y="367.50">alloc::vec::source_iter_mar..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (35 samples, 8.31%)</title><rect x="31.8290%" y="341" width="8.3135%" height="15" fill="rgb(224,130,29)" fg:x="134" fg:w="35"/><text x="31.9490%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.48%)</title><rect x="39.6675%" y="325" width="0.4751%" height="15" fill="rgb(235,212,8)" fg:x="167" fg:w="2"/><text x="39.7875%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.48%)</title><rect x="39.6675%" y="309" width="0.4751%" height="15" fill="rgb(223,33,50)" fg:x="167" fg:w="2"/><text x="39.7875%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.48%)</title><rect x="39.6675%" y="293" width="0.4751%" height="15" fill="rgb(219,149,13)" fg:x="167" fg:w="2"/><text x="39.7875%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.48%)</title><rect x="39.6675%" y="277" width="0.4751%" height="15" fill="rgb(250,156,29)" fg:x="167" fg:w="2"/><text x="39.7875%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.48%)</title><rect x="39.6675%" y="261" width="0.4751%" height="15" fill="rgb(216,193,19)" fg:x="167" fg:w="2"/><text x="39.7875%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.48%)</title><rect x="39.6675%" y="245" width="0.4751%" height="15" fill="rgb(216,135,14)" fg:x="167" fg:w="2"/><text x="39.7875%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.48%)</title><rect x="39.6675%" y="229" width="0.4751%" height="15" fill="rgb(241,47,5)" fg:x="167" fg:w="2"/><text x="39.7875%" y="239.50"></text></g><g><title>rust_oom (1 samples, 0.24%)</title><rect x="39.9050%" y="213" width="0.2375%" height="15" fill="rgb(233,42,35)" fg:x="168" fg:w="1"/><text x="40.0250%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.71%)</title><rect x="40.1425%" y="277" width="0.7126%" height="15" fill="rgb(231,13,6)" fg:x="169" fg:w="3"/><text x="40.2625%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.71%)</title><rect x="40.1425%" y="261" width="0.7126%" height="15" fill="rgb(207,181,40)" fg:x="169" fg:w="3"/><text x="40.2625%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.71%)</title><rect x="40.1425%" y="245" width="0.7126%" height="15" fill="rgb(254,173,49)" fg:x="169" fg:w="3"/><text x="40.2625%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.71%)</title><rect x="40.1425%" y="229" width="0.7126%" height="15" fill="rgb(221,1,38)" fg:x="169" fg:w="3"/><text x="40.2625%" y="239.50"></text></g><g><title>hashbrown::map::make_insert_hash (5 samples, 1.19%)</title><rect x="40.1425%" y="309" width="1.1876%" height="15" fill="rgb(206,124,46)" fg:x="169" fg:w="5"/><text x="40.2625%" y="319.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 1.19%)</title><rect x="40.1425%" y="293" width="1.1876%" height="15" fill="rgb(249,21,11)" fg:x="169" fg:w="5"/><text x="40.2625%" y="303.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.48%)</title><rect x="40.8551%" y="277" width="0.4751%" height="15" fill="rgb(222,201,40)" fg:x="172" fg:w="2"/><text x="40.9751%" y="287.50"></text></g><g><title>&lt;fmrs::position::square::Square as core::hash::Hash&gt;::hash (2 samples, 0.48%)</title><rect x="40.8551%" y="261" width="0.4751%" height="15" fill="rgb(235,61,29)" fg:x="172" fg:w="2"/><text x="40.9751%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.48%)</title><rect x="40.8551%" y="245" width="0.4751%" height="15" fill="rgb(219,207,3)" fg:x="172" fg:w="2"/><text x="40.9751%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.48%)</title><rect x="40.8551%" y="229" width="0.4751%" height="15" fill="rgb(222,56,46)" fg:x="172" fg:w="2"/><text x="40.9751%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.48%)</title><rect x="40.8551%" y="213" width="0.4751%" height="15" fill="rgb(239,76,54)" fg:x="172" fg:w="2"/><text x="40.9751%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.48%)</title><rect x="40.8551%" y="197" width="0.4751%" height="15" fill="rgb(231,124,27)" fg:x="172" fg:w="2"/><text x="40.9751%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.48%)</title><rect x="40.8551%" y="181" width="0.4751%" height="15" fill="rgb(249,195,6)" fg:x="172" fg:w="2"/><text x="40.9751%" y="191.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.48%)</title><rect x="40.8551%" y="165" width="0.4751%" height="15" fill="rgb(237,174,47)" fg:x="172" fg:w="2"/><text x="40.9751%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.48%)</title><rect x="41.3302%" y="293" width="0.4751%" height="15" fill="rgb(206,201,31)" fg:x="174" fg:w="2"/><text x="41.4502%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.48%)</title><rect x="41.3302%" y="277" width="0.4751%" height="15" fill="rgb(231,57,52)" fg:x="174" fg:w="2"/><text x="41.4502%" y="287.50"></text></g><g><title>core::ptr::write (2 samples, 0.48%)</title><rect x="41.3302%" y="261" width="0.4751%" height="15" fill="rgb(248,177,22)" fg:x="174" fg:w="2"/><text x="41.4502%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 2.14%)</title><rect x="40.1425%" y="341" width="2.1378%" height="15" fill="rgb(215,211,37)" fg:x="169" fg:w="9"/><text x="40.2625%" y="351.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 2.14%)</title><rect x="40.1425%" y="325" width="2.1378%" height="15" fill="rgb(241,128,51)" fg:x="169" fg:w="9"/><text x="40.2625%" y="335.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (4 samples, 0.95%)</title><rect x="41.3302%" y="309" width="0.9501%" height="15" fill="rgb(227,165,31)" fg:x="174" fg:w="4"/><text x="41.4502%" y="319.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.48%)</title><rect x="41.8052%" y="293" width="0.4751%" height="15" fill="rgb(228,167,24)" fg:x="176" fg:w="2"/><text x="41.9252%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.48%)</title><rect x="41.8052%" y="277" width="0.4751%" height="15" fill="rgb(228,143,12)" fg:x="176" fg:w="2"/><text x="41.9252%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2 samples, 0.48%)</title><rect x="41.8052%" y="261" width="0.4751%" height="15" fill="rgb(249,149,8)" fg:x="176" fg:w="2"/><text x="41.9252%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2 samples, 0.48%)</title><rect x="41.8052%" y="245" width="0.4751%" height="15" fill="rgb(243,35,44)" fg:x="176" fg:w="2"/><text x="41.9252%" y="255.50"></text></g><g><title>core::mem::swap (2 samples, 0.48%)</title><rect x="41.8052%" y="229" width="0.4751%" height="15" fill="rgb(246,89,9)" fg:x="176" fg:w="2"/><text x="41.9252%" y="239.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (2 samples, 0.48%)</title><rect x="41.8052%" y="213" width="0.4751%" height="15" fill="rgb(233,213,13)" fg:x="176" fg:w="2"/><text x="41.9252%" y="223.50"></text></g><g><title>core::ptr::swap_nonoverlapping (2 samples, 0.48%)</title><rect x="41.8052%" y="197" width="0.4751%" height="15" fill="rgb(233,141,41)" fg:x="176" fg:w="2"/><text x="41.9252%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (2 samples, 0.48%)</title><rect x="41.8052%" y="181" width="0.4751%" height="15" fill="rgb(239,167,4)" fg:x="176" fg:w="2"/><text x="41.9252%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.48%)</title><rect x="41.8052%" y="165" width="0.4751%" height="15" fill="rgb(209,217,16)" fg:x="176" fg:w="2"/><text x="41.9252%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 2.38%)</title><rect x="40.1425%" y="389" width="2.3753%" height="15" fill="rgb(219,88,35)" fg:x="169" fg:w="10"/><text x="40.2625%" y="399.50">core::..</text></g><g><title>fmrs::position::position::Position::move_candidates::{{closure}} (10 samples, 2.38%)</title><rect x="40.1425%" y="373" width="2.3753%" height="15" fill="rgb(220,193,23)" fg:x="169" fg:w="10"/><text x="40.2625%" y="383.50">fmrs::..</text></g><g><title>fmrs::position::position::Position::pinned (10 samples, 2.38%)</title><rect x="40.1425%" y="357" width="2.3753%" height="15" fill="rgb(230,90,52)" fg:x="169" fg:w="10"/><text x="40.2625%" y="367.50">fmrs::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (1 samples, 0.24%)</title><rect x="42.2803%" y="341" width="0.2375%" height="15" fill="rgb(252,106,19)" fg:x="178" fg:w="1"/><text x="42.4003%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.24%)</title><rect x="42.2803%" y="325" width="0.2375%" height="15" fill="rgb(206,74,20)" fg:x="178" fg:w="1"/><text x="42.4003%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (1 samples, 0.24%)</title><rect x="42.2803%" y="309" width="0.2375%" height="15" fill="rgb(230,138,44)" fg:x="178" fg:w="1"/><text x="42.4003%" y="319.50"></text></g><g><title>std::collections::hash::map::RandomState::new (1 samples, 0.24%)</title><rect x="42.2803%" y="293" width="0.2375%" height="15" fill="rgb(235,182,43)" fg:x="178" fg:w="1"/><text x="42.4003%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.24%)</title><rect x="42.2803%" y="277" width="0.2375%" height="15" fill="rgb(242,16,51)" fg:x="178" fg:w="1"/><text x="42.4003%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.24%)</title><rect x="42.2803%" y="261" width="0.2375%" height="15" fill="rgb(248,9,4)" fg:x="178" fg:w="1"/><text x="42.4003%" y="271.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (1 samples, 0.24%)</title><rect x="42.2803%" y="245" width="0.2375%" height="15" fill="rgb(210,31,22)" fg:x="178" fg:w="1"/><text x="42.4003%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::collections::hash::map::HashMap&lt;fmrs::position::square::Square,fmrs::position::bitboard::BitBoard&gt;&gt;&gt; (1 samples, 0.24%)</title><rect x="42.5178%" y="389" width="0.2375%" height="15" fill="rgb(239,54,39)" fg:x="179" fg:w="1"/><text x="42.6378%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;fmrs::position::square::Square,fmrs::position::bitboard::BitBoard&gt;&gt; (1 samples, 0.24%)</title><rect x="42.5178%" y="373" width="0.2375%" height="15" fill="rgb(230,99,41)" fg:x="179" fg:w="1"/><text x="42.6378%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;fmrs::position::square::Square,fmrs::position::bitboard::BitBoard,std::collections::hash::map::RandomState&gt;&gt; (1 samples, 0.24%)</title><rect x="42.5178%" y="357" width="0.2375%" height="15" fill="rgb(253,106,12)" fg:x="179" fg:w="1"/><text x="42.6378%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(fmrs::position::square::Square,fmrs::position::bitboard::BitBoard)&gt;&gt; (1 samples, 0.24%)</title><rect x="42.5178%" y="341" width="0.2375%" height="15" fill="rgb(213,46,41)" fg:x="179" fg:w="1"/><text x="42.6378%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="42.5178%" y="325" width="0.2375%" height="15" fill="rgb(215,133,35)" fg:x="179" fg:w="1"/><text x="42.6378%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (1 samples, 0.24%)</title><rect x="42.5178%" y="309" width="0.2375%" height="15" fill="rgb(213,28,5)" fg:x="179" fg:w="1"/><text x="42.6378%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (1 samples, 0.24%)</title><rect x="42.5178%" y="293" width="0.2375%" height="15" fill="rgb(215,77,49)" fg:x="179" fg:w="1"/><text x="42.6378%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.24%)</title><rect x="42.5178%" y="277" width="0.2375%" height="15" fill="rgb(248,100,22)" fg:x="179" fg:w="1"/><text x="42.6378%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.24%)</title><rect x="42.5178%" y="261" width="0.2375%" height="15" fill="rgb(208,67,9)" fg:x="179" fg:w="1"/><text x="42.6378%" y="271.50"></text></g><g><title>_int_free (1 samples, 0.24%)</title><rect x="42.5178%" y="245" width="0.2375%" height="15" fill="rgb(219,133,21)" fg:x="179" fg:w="1"/><text x="42.6378%" y="255.50"></text></g><g><title>fmrs::position::bitboard::attacks_from (4 samples, 0.95%)</title><rect x="42.7553%" y="389" width="0.9501%" height="15" fill="rgb(246,46,29)" fg:x="180" fg:w="4"/><text x="42.8753%" y="399.50">f..</text></g><g><title>&lt;fmrs::position::bitboard::ATTACKS as core::ops::deref::Deref&gt;::deref (4 samples, 0.95%)</title><rect x="42.7553%" y="373" width="0.9501%" height="15" fill="rgb(246,185,52)" fg:x="180" fg:w="4"/><text x="42.8753%" y="383.50">&lt;..</text></g><g><title>&lt;fmrs::position::bitboard::ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (4 samples, 0.95%)</title><rect x="42.7553%" y="357" width="0.9501%" height="15" fill="rgb(252,136,11)" fg:x="180" fg:w="4"/><text x="42.8753%" y="367.50">&lt;..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (4 samples, 0.95%)</title><rect x="42.7553%" y="341" width="0.9501%" height="15" fill="rgb(219,138,53)" fg:x="180" fg:w="4"/><text x="42.8753%" y="351.50">l..</text></g><g><title>fmrs::position::bitboard::attacks_from (9 samples, 2.14%)</title><rect x="48.2185%" y="373" width="2.1378%" height="15" fill="rgb(211,51,23)" fg:x="203" fg:w="9"/><text x="48.3385%" y="383.50">fmrs:..</text></g><g><title>fmrs::position::bitboard::movable_positions (29 samples, 6.89%)</title><rect x="43.7055%" y="389" width="6.8884%" height="15" fill="rgb(247,221,28)" fg:x="184" fg:w="29"/><text x="43.8255%" y="399.50">fmrs::position::bitboa..</text></g><g><title>fmrs::position::bitboard::movable_positions (1 samples, 0.24%)</title><rect x="50.3563%" y="373" width="0.2375%" height="15" fill="rgb(251,222,45)" fg:x="212" fg:w="1"/><text x="50.4763%" y="383.50"></text></g><g><title>fmrs::position::bitboard::bishop_movable_positions (1 samples, 0.24%)</title><rect x="50.3563%" y="357" width="0.2375%" height="15" fill="rgb(217,162,53)" fg:x="212" fg:w="1"/><text x="50.4763%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.43%)</title><rect x="50.5938%" y="341" width="1.4252%" height="15" fill="rgb(229,93,14)" fg:x="213" fg:w="6"/><text x="50.7138%" y="351.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (6 samples, 1.43%)</title><rect x="50.5938%" y="325" width="1.4252%" height="15" fill="rgb(209,67,49)" fg:x="213" fg:w="6"/><text x="50.7138%" y="335.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 1.43%)</title><rect x="50.5938%" y="309" width="1.4252%" height="15" fill="rgb(213,87,29)" fg:x="213" fg:w="6"/><text x="50.7138%" y="319.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 1.43%)</title><rect x="50.5938%" y="293" width="1.4252%" height="15" fill="rgb(205,151,52)" fg:x="213" fg:w="6"/><text x="50.7138%" y="303.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 1.43%)</title><rect x="50.5938%" y="277" width="1.4252%" height="15" fill="rgb(253,215,39)" fg:x="213" fg:w="6"/><text x="50.7138%" y="287.50">cor..</text></g><g><title>fmrs::position::position::Position::attackers_to::{{closure}} (6 samples, 1.43%)</title><rect x="50.5938%" y="261" width="1.4252%" height="15" fill="rgb(221,220,41)" fg:x="213" fg:w="6"/><text x="50.7138%" y="271.50">fmr..</text></g><g><title>fmrs::position::bitboard::movable_positions (6 samples, 1.43%)</title><rect x="50.5938%" y="245" width="1.4252%" height="15" fill="rgb(218,133,21)" fg:x="213" fg:w="6"/><text x="50.7138%" y="255.50">fmr..</text></g><g><title>fmrs::position::bitboard::movable_positions (3 samples, 0.71%)</title><rect x="51.3064%" y="229" width="0.7126%" height="15" fill="rgb(221,193,43)" fg:x="216" fg:w="3"/><text x="51.4264%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.90%)</title><rect x="50.5938%" y="373" width="1.9002%" height="15" fill="rgb(240,128,52)" fg:x="213" fg:w="8"/><text x="50.7138%" y="383.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.90%)</title><rect x="50.5938%" y="357" width="1.9002%" height="15" fill="rgb(253,114,12)" fg:x="213" fg:w="8"/><text x="50.7138%" y="367.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.48%)</title><rect x="52.0190%" y="341" width="0.4751%" height="15" fill="rgb(215,223,47)" fg:x="219" fg:w="2"/><text x="52.1390%" y="351.50"></text></g><g><title>&lt;fmrs::position::bitboard::BitBoard as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.48%)</title><rect x="52.0190%" y="325" width="0.4751%" height="15" fill="rgb(248,225,23)" fg:x="219" fg:w="2"/><text x="52.1390%" y="335.50"></text></g><g><title>fmrs::position::bitboard::BitBoard::is_empty (2 samples, 0.48%)</title><rect x="52.0190%" y="309" width="0.4751%" height="15" fill="rgb(250,108,0)" fg:x="219" fg:w="2"/><text x="52.1390%" y="319.50"></text></g><g><title>&lt;fmrs::position::bitboard::BitBoard as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.48%)</title><rect x="52.4941%" y="373" width="0.4751%" height="15" fill="rgb(228,208,7)" fg:x="221" fg:w="2"/><text x="52.6141%" y="383.50"></text></g><g><title>fmrs::position::bitboard::BitBoard::is_empty (2 samples, 0.48%)</title><rect x="52.4941%" y="357" width="0.4751%" height="15" fill="rgb(244,45,10)" fg:x="221" fg:w="2"/><text x="52.6141%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1 samples, 0.24%)</title><rect x="52.9691%" y="373" width="0.2375%" height="15" fill="rgb(207,125,25)" fg:x="223" fg:w="1"/><text x="53.0891%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.24%)</title><rect x="52.9691%" y="357" width="0.2375%" height="15" fill="rgb(210,195,18)" fg:x="223" fg:w="1"/><text x="53.0891%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.24%)</title><rect x="52.9691%" y="341" width="0.2375%" height="15" fill="rgb(249,80,12)" fg:x="223" fg:w="1"/><text x="53.0891%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.24%)</title><rect x="52.9691%" y="325" width="0.2375%" height="15" fill="rgb(221,65,9)" fg:x="223" fg:w="1"/><text x="53.0891%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.24%)</title><rect x="52.9691%" y="309" width="0.2375%" height="15" fill="rgb(235,49,36)" fg:x="223" fg:w="1"/><text x="53.0891%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.24%)</title><rect x="52.9691%" y="293" width="0.2375%" height="15" fill="rgb(225,32,20)" fg:x="223" fg:w="1"/><text x="53.0891%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.24%)</title><rect x="52.9691%" y="277" width="0.2375%" height="15" fill="rgb(215,141,46)" fg:x="223" fg:w="1"/><text x="53.0891%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.24%)</title><rect x="52.9691%" y="261" width="0.2375%" height="15" fill="rgb(250,160,47)" fg:x="223" fg:w="1"/><text x="53.0891%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.24%)</title><rect x="52.9691%" y="245" width="0.2375%" height="15" fill="rgb(216,222,40)" fg:x="223" fg:w="1"/><text x="53.0891%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.24%)</title><rect x="52.9691%" y="229" width="0.2375%" height="15" fill="rgb(234,217,39)" fg:x="223" fg:w="1"/><text x="53.0891%" y="239.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.24%)</title><rect x="52.9691%" y="213" width="0.2375%" height="15" fill="rgb(207,178,40)" fg:x="223" fg:w="1"/><text x="53.0891%" y="223.50"></text></g><g><title>_int_realloc (1 samples, 0.24%)</title><rect x="52.9691%" y="197" width="0.2375%" height="15" fill="rgb(221,136,13)" fg:x="223" fg:w="1"/><text x="53.0891%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.24%)</title><rect x="52.9691%" y="181" width="0.2375%" height="15" fill="rgb(249,199,10)" fg:x="223" fg:w="1"/><text x="53.0891%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.48%)</title><rect x="53.4442%" y="309" width="0.4751%" height="15" fill="rgb(249,222,13)" fg:x="225" fg:w="2"/><text x="53.5642%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.48%)</title><rect x="53.4442%" y="293" width="0.4751%" height="15" fill="rgb(244,185,38)" fg:x="225" fg:w="2"/><text x="53.5642%" y="303.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.48%)</title><rect x="53.4442%" y="277" width="0.4751%" height="15" fill="rgb(236,202,9)" fg:x="225" fg:w="2"/><text x="53.5642%" y="287.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.48%)</title><rect x="53.4442%" y="261" width="0.4751%" height="15" fill="rgb(250,229,37)" fg:x="225" fg:w="2"/><text x="53.5642%" y="271.50"></text></g><g><title>_int_realloc (2 samples, 0.48%)</title><rect x="53.4442%" y="245" width="0.4751%" height="15" fill="rgb(206,174,23)" fg:x="225" fg:w="2"/><text x="53.5642%" y="255.50"></text></g><g><title>_int_malloc (2 samples, 0.48%)</title><rect x="53.4442%" y="229" width="0.4751%" height="15" fill="rgb(211,33,43)" fg:x="225" fg:w="2"/><text x="53.5642%" y="239.50"></text></g><g><title>fmrs::position::position::Position::next_positions (186 samples, 44.18%)</title><rect x="9.9762%" y="421" width="44.1805%" height="15" fill="rgb(245,58,50)" fg:x="42" fg:w="186"/><text x="10.0962%" y="431.50">fmrs::position::position::Position::next_positions</text></g><g><title>fmrs::position::position::Position::move_candidates (165 samples, 39.19%)</title><rect x="14.9644%" y="405" width="39.1924%" height="15" fill="rgb(244,68,36)" fg:x="63" fg:w="165"/><text x="15.0844%" y="415.50">fmrs::position::position::Position::move_candidates</text></g><g><title>fmrs::position::position::Position::generate_attack_preventing_moves (15 samples, 3.56%)</title><rect x="50.5938%" y="389" width="3.5629%" height="15" fill="rgb(232,229,15)" fg:x="213" fg:w="15"/><text x="50.7138%" y="399.50">fmrs::posi..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.95%)</title><rect x="53.2067%" y="373" width="0.9501%" height="15" fill="rgb(254,30,23)" fg:x="224" fg:w="4"/><text x="53.3267%" y="383.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.95%)</title><rect x="53.2067%" y="357" width="0.9501%" height="15" fill="rgb(235,160,14)" fg:x="224" fg:w="4"/><text x="53.3267%" y="367.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.95%)</title><rect x="53.2067%" y="341" width="0.9501%" height="15" fill="rgb(212,155,44)" fg:x="224" fg:w="4"/><text x="53.3267%" y="351.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.71%)</title><rect x="53.4442%" y="325" width="0.7126%" height="15" fill="rgb(226,2,50)" fg:x="225" fg:w="3"/><text x="53.5642%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.24%)</title><rect x="53.9192%" y="309" width="0.2375%" height="15" fill="rgb(234,177,6)" fg:x="227" fg:w="1"/><text x="54.0392%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.24%)</title><rect x="53.9192%" y="293" width="0.2375%" height="15" fill="rgb(217,24,9)" fg:x="227" fg:w="1"/><text x="54.0392%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.24%)</title><rect x="59.3824%" y="261" width="0.2375%" height="15" fill="rgb(220,13,46)" fg:x="250" fg:w="1"/><text x="59.5024%" y="271.50"></text></g><g><title>&lt;fmrs::piece::Color as core::hash::Hash&gt;::hash (6 samples, 1.43%)</title><rect x="58.6698%" y="389" width="1.4252%" height="15" fill="rgb(239,221,27)" fg:x="247" fg:w="6"/><text x="58.7898%" y="399.50">&lt;fm..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (6 samples, 1.43%)</title><rect x="58.6698%" y="373" width="1.4252%" height="15" fill="rgb(222,198,25)" fg:x="247" fg:w="6"/><text x="58.7898%" y="383.50">cor..</text></g><g><title>core::hash::Hasher::write_isize (6 samples, 1.43%)</title><rect x="58.6698%" y="357" width="1.4252%" height="15" fill="rgb(211,99,13)" fg:x="247" fg:w="6"/><text x="58.7898%" y="367.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (6 samples, 1.43%)</title><rect x="58.6698%" y="341" width="1.4252%" height="15" fill="rgb(232,111,31)" fg:x="247" fg:w="6"/><text x="58.7898%" y="351.50">cor..</text></g><g><title>&lt;twox_hash::xxh3::Hash64 as core::hash::Hasher&gt;::write (6 samples, 1.43%)</title><rect x="58.6698%" y="325" width="1.4252%" height="15" fill="rgb(245,82,37)" fg:x="247" fg:w="6"/><text x="58.7898%" y="335.50">&lt;tw..</text></g><g><title>twox_hash::xxh3::State::update (6 samples, 1.43%)</title><rect x="58.6698%" y="309" width="1.4252%" height="15" fill="rgb(227,149,46)" fg:x="247" fg:w="6"/><text x="58.7898%" y="319.50">two..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.71%)</title><rect x="59.3824%" y="293" width="0.7126%" height="15" fill="rgb(218,36,50)" fg:x="250" fg:w="3"/><text x="59.5024%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.71%)</title><rect x="59.3824%" y="277" width="0.7126%" height="15" fill="rgb(226,80,48)" fg:x="250" fg:w="3"/><text x="59.5024%" y="287.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (2 samples, 0.48%)</title><rect x="59.6200%" y="261" width="0.4751%" height="15" fill="rgb(238,224,15)" fg:x="251" fg:w="2"/><text x="59.7400%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (2 samples, 0.48%)</title><rect x="59.6200%" y="245" width="0.4751%" height="15" fill="rgb(241,136,10)" fg:x="251" fg:w="2"/><text x="59.7400%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.48%)</title><rect x="59.6200%" y="229" width="0.4751%" height="15" fill="rgb(208,32,45)" fg:x="251" fg:w="2"/><text x="59.7400%" y="239.50"></text></g><g><title>Unknown (1 samples, 0.24%)</title><rect x="61.2827%" y="245" width="0.2375%" height="15" fill="rgb(207,135,9)" fg:x="258" fg:w="1"/><text x="61.4027%" y="255.50"></text></g><g><title>&lt;fmrs::position::hands::Hands as core::hash::Hash&gt;::hash (7 samples, 1.66%)</title><rect x="60.0950%" y="389" width="1.6627%" height="15" fill="rgb(206,86,44)" fg:x="253" fg:w="7"/><text x="60.2150%" y="399.50">&lt;fm..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.71%)</title><rect x="61.0451%" y="373" width="0.7126%" height="15" fill="rgb(245,177,15)" fg:x="257" fg:w="3"/><text x="61.1651%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.71%)</title><rect x="61.0451%" y="357" width="0.7126%" height="15" fill="rgb(206,64,50)" fg:x="257" fg:w="3"/><text x="61.1651%" y="367.50"></text></g><g><title>&lt;twox_hash::xxh3::Hash64 as core::hash::Hasher&gt;::write (3 samples, 0.71%)</title><rect x="61.0451%" y="341" width="0.7126%" height="15" fill="rgb(234,36,40)" fg:x="257" fg:w="3"/><text x="61.1651%" y="351.50"></text></g><g><title>twox_hash::xxh3::State::update (3 samples, 0.71%)</title><rect x="61.0451%" y="325" width="0.7126%" height="15" fill="rgb(213,64,8)" fg:x="257" fg:w="3"/><text x="61.1651%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.48%)</title><rect x="61.2827%" y="309" width="0.4751%" height="15" fill="rgb(210,75,36)" fg:x="258" fg:w="2"/><text x="61.4027%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.48%)</title><rect x="61.2827%" y="293" width="0.4751%" height="15" fill="rgb(229,88,21)" fg:x="258" fg:w="2"/><text x="61.4027%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.48%)</title><rect x="61.2827%" y="277" width="0.4751%" height="15" fill="rgb(252,204,47)" fg:x="258" fg:w="2"/><text x="61.4027%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.48%)</title><rect x="61.2827%" y="261" width="0.4751%" height="15" fill="rgb(208,77,27)" fg:x="258" fg:w="2"/><text x="61.4027%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.24%)</title><rect x="61.5202%" y="245" width="0.2375%" height="15" fill="rgb(221,76,26)" fg:x="259" fg:w="1"/><text x="61.6402%" y="255.50"></text></g><g><title>&lt;twox_hash::xxh3::With as core::ops::deref::Deref&gt;::deref (1 samples, 0.24%)</title><rect x="66.2708%" y="245" width="0.2375%" height="15" fill="rgb(225,139,18)" fg:x="279" fg:w="1"/><text x="66.3908%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.24%)</title><rect x="66.2708%" y="229" width="0.2375%" height="15" fill="rgb(230,137,11)" fg:x="279" fg:w="1"/><text x="66.3908%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.24%)</title><rect x="66.2708%" y="213" width="0.2375%" height="15" fill="rgb(212,28,1)" fg:x="279" fg:w="1"/><text x="66.3908%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 2.14%)</title><rect x="66.5083%" y="213" width="2.1378%" height="15" fill="rgb(248,164,17)" fg:x="280" fg:w="9"/><text x="66.6283%" y="223.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 2.14%)</title><rect x="66.5083%" y="197" width="2.1378%" height="15" fill="rgb(222,171,42)" fg:x="280" fg:w="9"/><text x="66.6283%" y="207.50">core:..</text></g><g><title>Unknown (9 samples, 2.14%)</title><rect x="66.5083%" y="181" width="2.1378%" height="15" fill="rgb(243,84,45)" fg:x="280" fg:w="9"/><text x="66.6283%" y="191.50">Unkno..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (29 samples, 6.89%)</title><rect x="66.5083%" y="245" width="6.8884%" height="15" fill="rgb(252,49,23)" fg:x="280" fg:w="29"/><text x="66.6283%" y="255.50">alloc::vec::Vec&lt;T,A&gt;::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 6.89%)</title><rect x="66.5083%" y="229" width="6.8884%" height="15" fill="rgb(215,19,7)" fg:x="280" fg:w="29"/><text x="66.6283%" y="239.50">&lt;alloc::vec::Vec&lt;T,A&gt; ..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (20 samples, 4.75%)</title><rect x="68.6461%" y="213" width="4.7506%" height="15" fill="rgb(238,81,41)" fg:x="289" fg:w="20"/><text x="68.7661%" y="223.50">core::slice::i..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (20 samples, 4.75%)</title><rect x="68.6461%" y="197" width="4.7506%" height="15" fill="rgb(210,199,37)" fg:x="289" fg:w="20"/><text x="68.7661%" y="207.50">core::slice::i..</text></g><g><title>core::slice::raw::from_raw_parts (20 samples, 4.75%)</title><rect x="68.6461%" y="181" width="4.7506%" height="15" fill="rgb(244,192,49)" fg:x="289" fg:w="20"/><text x="68.7661%" y="191.50">core::slice::r..</text></g><g><title>core::hash::Hash::hash_slice (53 samples, 12.59%)</title><rect x="62.4703%" y="341" width="12.5891%" height="15" fill="rgb(226,211,11)" fg:x="263" fg:w="53"/><text x="62.5903%" y="351.50">core::hash::Hash::hash_slice</text></g><g><title>&lt;fmrs::position::bitboard::BitBoard as core::hash::Hash&gt;::hash (53 samples, 12.59%)</title><rect x="62.4703%" y="325" width="12.5891%" height="15" fill="rgb(236,162,54)" fg:x="263" fg:w="53"/><text x="62.5903%" y="335.50">&lt;fmrs::position::bitboard::BitBoard as cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u128&gt;::hash (53 samples, 12.59%)</title><rect x="62.4703%" y="309" width="12.5891%" height="15" fill="rgb(220,229,9)" fg:x="263" fg:w="53"/><text x="62.5903%" y="319.50">core::hash::impls::&lt;impl core::hash::Hash ..</text></g><g><title>core::hash::Hasher::write_u128 (53 samples, 12.59%)</title><rect x="62.4703%" y="293" width="12.5891%" height="15" fill="rgb(250,87,22)" fg:x="263" fg:w="53"/><text x="62.5903%" y="303.50">core::hash::Hasher::write_u128</text></g><g><title>&lt;twox_hash::xxh3::Hash64 as core::hash::Hasher&gt;::write (53 samples, 12.59%)</title><rect x="62.4703%" y="277" width="12.5891%" height="15" fill="rgb(239,43,17)" fg:x="263" fg:w="53"/><text x="62.5903%" y="287.50">&lt;twox_hash::xxh3::Hash64 as core::hash::Ha..</text></g><g><title>twox_hash::xxh3::State::update (53 samples, 12.59%)</title><rect x="62.4703%" y="261" width="12.5891%" height="15" fill="rgb(231,177,25)" fg:x="263" fg:w="53"/><text x="62.5903%" y="271.50">twox_hash::xxh3::State::update</text></g><g><title>twox_hash::xxh3::consume_stripes (7 samples, 1.66%)</title><rect x="73.3967%" y="245" width="1.6627%" height="15" fill="rgb(219,179,1)" fg:x="309" fg:w="7"/><text x="73.5167%" y="255.50">two..</text></g><g><title>twox_hash::xxh3::accumulate (7 samples, 1.66%)</title><rect x="73.3967%" y="229" width="1.6627%" height="15" fill="rgb(238,219,53)" fg:x="309" fg:w="7"/><text x="73.5167%" y="239.50">two..</text></g><g><title>twox_hash::xxh3::sse2::accumulate512 (7 samples, 1.66%)</title><rect x="73.3967%" y="213" width="1.6627%" height="15" fill="rgb(232,167,36)" fg:x="309" fg:w="7"/><text x="73.5167%" y="223.50">two..</text></g><g><title>core::core_arch::x86::sse2::_mm_mul_epu32 (7 samples, 1.66%)</title><rect x="73.3967%" y="197" width="1.6627%" height="15" fill="rgb(244,19,51)" fg:x="309" fg:w="7"/><text x="73.5167%" y="207.50">cor..</text></g><g><title>&lt;fmrs::position::position::Position as core::hash::Hash&gt;::hash (73 samples, 17.34%)</title><rect x="58.6698%" y="405" width="17.3397%" height="15" fill="rgb(224,6,22)" fg:x="247" fg:w="73"/><text x="58.7898%" y="415.50">&lt;fmrs::position::position::Position as core::hash::Hash&gt;::h..</text></g><g><title>core::array::&lt;impl core::hash::Hash for [T (60 samples, 14.25%)</title><rect x="61.7577%" y="389" width="14.2518%" height="15" fill="rgb(224,145,5)" fg:x="260" fg:w="60"/><text x="61.8777%" y="399.50">core::array::&lt;impl core::hash::Hash for [T</text></g><g><title> N]&gt;::hash (60 samples, 14.25%)</title><rect x="61.7577%" y="373" width="14.2518%" height="15" fill="rgb(234,130,49)" fg:x="260" fg:w="60"/><text x="61.8777%" y="383.50"> N]&gt;::hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (57 samples, 13.54%)</title><rect x="62.4703%" y="357" width="13.5392%" height="15" fill="rgb(254,6,2)" fg:x="263" fg:w="57"/><text x="62.5903%" y="367.50">core::hash::impls::&lt;impl core::hash::Hash for..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.95%)</title><rect x="75.0594%" y="341" width="0.9501%" height="15" fill="rgb(208,96,46)" fg:x="316" fg:w="4"/><text x="75.1794%" y="351.50">c..</text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.95%)</title><rect x="75.0594%" y="325" width="0.9501%" height="15" fill="rgb(239,3,39)" fg:x="316" fg:w="4"/><text x="75.1794%" y="335.50">c..</text></g><g><title>&lt;twox_hash::xxh3::Hash64 as core::hash::Hasher&gt;::write (4 samples, 0.95%)</title><rect x="75.0594%" y="309" width="0.9501%" height="15" fill="rgb(233,210,1)" fg:x="316" fg:w="4"/><text x="75.1794%" y="319.50">&lt;..</text></g><g><title>twox_hash::xxh3::State::update (4 samples, 0.95%)</title><rect x="75.0594%" y="293" width="0.9501%" height="15" fill="rgb(244,137,37)" fg:x="316" fg:w="4"/><text x="75.1794%" y="303.50">t..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.95%)</title><rect x="75.0594%" y="277" width="0.9501%" height="15" fill="rgb(240,136,2)" fg:x="316" fg:w="4"/><text x="75.1794%" y="287.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.95%)</title><rect x="75.0594%" y="261" width="0.9501%" height="15" fill="rgb(239,18,37)" fg:x="316" fg:w="4"/><text x="75.1794%" y="271.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.95%)</title><rect x="75.0594%" y="245" width="0.9501%" height="15" fill="rgb(218,185,22)" fg:x="316" fg:w="4"/><text x="75.1794%" y="255.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.95%)</title><rect x="75.0594%" y="229" width="0.9501%" height="15" fill="rgb(225,218,4)" fg:x="316" fg:w="4"/><text x="75.1794%" y="239.50">c..</text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.95%)</title><rect x="75.0594%" y="213" width="0.9501%" height="15" fill="rgb(230,182,32)" fg:x="316" fg:w="4"/><text x="75.1794%" y="223.50">_..</text></g><g><title>&lt;twox_hash::xxh3::Hash64 as core::default::Default&gt;::default (10 samples, 2.38%)</title><rect x="76.0095%" y="405" width="2.3753%" height="15" fill="rgb(242,56,43)" fg:x="320" fg:w="10"/><text x="76.1295%" y="415.50">&lt;twox_..</text></g><g><title>&lt;twox_hash::xxh3::State as core::default::Default&gt;::default (10 samples, 2.38%)</title><rect x="76.0095%" y="389" width="2.3753%" height="15" fill="rgb(233,99,24)" fg:x="320" fg:w="10"/><text x="76.1295%" y="399.50">&lt;twox_..</text></g><g><title>twox_hash::xxh3::State::new (10 samples, 2.38%)</title><rect x="76.0095%" y="373" width="2.3753%" height="15" fill="rgb(234,209,42)" fg:x="320" fg:w="10"/><text x="76.1295%" y="383.50">twox_h..</text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 1.66%)</title><rect x="76.7221%" y="357" width="1.6627%" height="15" fill="rgb(227,7,12)" fg:x="323" fg:w="7"/><text x="76.8421%" y="367.50">__m..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.48%)</title><rect x="79.3349%" y="357" width="0.4751%" height="15" fill="rgb(245,203,43)" fg:x="334" fg:w="2"/><text x="79.4549%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.48%)</title><rect x="79.3349%" y="341" width="0.4751%" height="15" fill="rgb(238,205,33)" fg:x="334" fg:w="2"/><text x="79.4549%" y="351.50"></text></g><g><title>Unknown (1 samples, 0.24%)</title><rect x="79.5724%" y="325" width="0.2375%" height="15" fill="rgb(231,56,7)" fg:x="335" fg:w="1"/><text x="79.6924%" y="335.50"></text></g><g><title>twox_hash::xxh3::State::secret_limit (2 samples, 0.48%)</title><rect x="79.8100%" y="357" width="0.4751%" height="15" fill="rgb(244,186,29)" fg:x="336" fg:w="2"/><text x="79.9300%" y="367.50"></text></g><g><title>&lt;twox_hash::xxh3::With as core::ops::deref::Deref&gt;::deref (2 samples, 0.48%)</title><rect x="79.8100%" y="341" width="0.4751%" height="15" fill="rgb(234,111,31)" fg:x="336" fg:w="2"/><text x="79.9300%" y="351.50"></text></g><g><title>twox_hash::xxh3::State::digest_long (10 samples, 2.38%)</title><rect x="78.3848%" y="373" width="2.3753%" height="15" fill="rgb(241,149,10)" fg:x="330" fg:w="10"/><text x="78.5048%" y="383.50">twox_h..</text></g><g><title>twox_hash::xxh3::sse2::accumulate512 (2 samples, 0.48%)</title><rect x="80.2850%" y="357" width="0.4751%" height="15" fill="rgb(249,206,44)" fg:x="338" fg:w="2"/><text x="80.4050%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.48%)</title><rect x="80.2850%" y="341" width="0.4751%" height="15" fill="rgb(251,153,30)" fg:x="338" fg:w="2"/><text x="80.4050%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.48%)</title><rect x="80.2850%" y="325" width="0.4751%" height="15" fill="rgb(239,152,38)" fg:x="338" fg:w="2"/><text x="80.4050%" y="335.50"></text></g><g><title>&lt;twox_hash::xxh3::Hash64 as core::hash::Hasher&gt;::finish (15 samples, 3.56%)</title><rect x="78.3848%" y="405" width="3.5629%" height="15" fill="rgb(249,139,47)" fg:x="330" fg:w="15"/><text x="78.5048%" y="415.50">&lt;twox_hash..</text></g><g><title>twox_hash::xxh3::State::digest64 (15 samples, 3.56%)</title><rect x="78.3848%" y="389" width="3.5629%" height="15" fill="rgb(244,64,35)" fg:x="330" fg:w="15"/><text x="78.5048%" y="399.50">twox_hash:..</text></g><g><title>twox_hash::xxh3::merge_accs (5 samples, 1.19%)</title><rect x="80.7601%" y="373" width="1.1876%" height="15" fill="rgb(216,46,15)" fg:x="340" fg:w="5"/><text x="80.8801%" y="383.50">tw..</text></g><g><title>twox_hash::xxh3::mix2accs (5 samples, 1.19%)</title><rect x="80.7601%" y="357" width="1.1876%" height="15" fill="rgb(250,74,19)" fg:x="340" fg:w="5"/><text x="80.8801%" y="367.50">tw..</text></g><g><title>&lt;[u8] as twox_hash::xxh3::Buf&gt;::read_u64_le (5 samples, 1.19%)</title><rect x="80.7601%" y="341" width="1.1876%" height="15" fill="rgb(249,42,33)" fg:x="340" fg:w="5"/><text x="80.8801%" y="351.50">&lt;[..</text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (5 samples, 1.19%)</title><rect x="80.7601%" y="325" width="1.1876%" height="15" fill="rgb(242,149,17)" fg:x="340" fg:w="5"/><text x="80.8801%" y="335.50">&lt;T..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (5 samples, 1.19%)</title><rect x="80.7601%" y="309" width="1.1876%" height="15" fill="rgb(244,29,21)" fg:x="340" fg:w="5"/><text x="80.8801%" y="319.50">co..</text></g><g><title> N]&gt;::try_from (5 samples, 1.19%)</title><rect x="80.7601%" y="293" width="1.1876%" height="15" fill="rgb(220,130,37)" fg:x="340" fg:w="5"/><text x="80.8801%" y="303.50"> N..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for &amp;[T (5 samples, 1.19%)</title><rect x="80.7601%" y="277" width="1.1876%" height="15" fill="rgb(211,67,2)" fg:x="340" fg:w="5"/><text x="80.8801%" y="287.50">co..</text></g><g><title> N]&gt;::try_from (5 samples, 1.19%)</title><rect x="80.7601%" y="261" width="1.1876%" height="15" fill="rgb(235,68,52)" fg:x="340" fg:w="5"/><text x="80.8801%" y="271.50"> N..</text></g><g><title>fmrs::solver::hash (119 samples, 28.27%)</title><rect x="54.1568%" y="421" width="28.2660%" height="15" fill="rgb(246,142,3)" fg:x="228" fg:w="119"/><text x="54.2768%" y="431.50">fmrs::solver::hash</text></g><g><title>core::ptr::drop_in_place&lt;twox_hash::xxh3::Hash64&gt; (2 samples, 0.48%)</title><rect x="81.9477%" y="405" width="0.4751%" height="15" fill="rgb(241,25,7)" fg:x="345" fg:w="2"/><text x="82.0677%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;twox_hash::xxh3::State&gt; (1 samples, 0.24%)</title><rect x="82.1853%" y="389" width="0.2375%" height="15" fill="rgb(242,119,39)" fg:x="346" fg:w="1"/><text x="82.3053%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.24%)</title><rect x="82.1853%" y="373" width="0.2375%" height="15" fill="rgb(241,98,45)" fg:x="346" fg:w="1"/><text x="82.3053%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.24%)</title><rect x="82.1853%" y="357" width="0.2375%" height="15" fill="rgb(254,28,30)" fg:x="346" fg:w="1"/><text x="82.3053%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.24%)</title><rect x="82.1853%" y="341" width="0.2375%" height="15" fill="rgb(241,142,54)" fg:x="346" fg:w="1"/><text x="82.3053%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.24%)</title><rect x="82.1853%" y="325" width="0.2375%" height="15" fill="rgb(222,85,15)" fg:x="346" fg:w="1"/><text x="82.3053%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.24%)</title><rect x="82.1853%" y="309" width="0.2375%" height="15" fill="rgb(210,85,47)" fg:x="346" fg:w="1"/><text x="82.3053%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.24%)</title><rect x="82.1853%" y="293" width="0.2375%" height="15" fill="rgb(224,206,25)" fg:x="346" fg:w="1"/><text x="82.3053%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 1.43%)</title><rect x="82.4228%" y="373" width="1.4252%" height="15" fill="rgb(243,201,19)" fg:x="347" fg:w="6"/><text x="82.5428%" y="383.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 1.43%)</title><rect x="82.4228%" y="357" width="1.4252%" height="15" fill="rgb(236,59,4)" fg:x="347" fg:w="6"/><text x="82.5428%" y="367.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 1.43%)</title><rect x="82.4228%" y="341" width="1.4252%" height="15" fill="rgb(254,179,45)" fg:x="347" fg:w="6"/><text x="82.5428%" y="351.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 1.43%)</title><rect x="82.4228%" y="325" width="1.4252%" height="15" fill="rgb(226,14,10)" fg:x="347" fg:w="6"/><text x="82.5428%" y="335.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 1.43%)</title><rect x="82.4228%" y="309" width="1.4252%" height="15" fill="rgb(244,27,41)" fg:x="347" fg:w="6"/><text x="82.5428%" y="319.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 1.43%)</title><rect x="82.4228%" y="293" width="1.4252%" height="15" fill="rgb(235,35,32)" fg:x="347" fg:w="6"/><text x="82.5428%" y="303.50">&lt;co..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7 samples, 1.66%)</title><rect x="82.4228%" y="421" width="1.6627%" height="15" fill="rgb(218,68,31)" fg:x="347" fg:w="7"/><text x="82.5428%" y="431.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7 samples, 1.66%)</title><rect x="82.4228%" y="405" width="1.6627%" height="15" fill="rgb(207,120,37)" fg:x="347" fg:w="7"/><text x="82.5428%" y="415.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 1.66%)</title><rect x="82.4228%" y="389" width="1.6627%" height="15" fill="rgb(227,98,0)" fg:x="347" fg:w="7"/><text x="82.5428%" y="399.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.24%)</title><rect x="83.8480%" y="373" width="0.2375%" height="15" fill="rgb(207,7,3)" fg:x="353" fg:w="1"/><text x="83.9680%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.24%)</title><rect x="83.8480%" y="357" width="0.2375%" height="15" fill="rgb(206,98,19)" fg:x="353" fg:w="1"/><text x="83.9680%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.24%)</title><rect x="83.8480%" y="341" width="0.2375%" height="15" fill="rgb(217,5,26)" fg:x="353" fg:w="1"/><text x="83.9680%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.24%)</title><rect x="83.8480%" y="325" width="0.2375%" height="15" fill="rgb(235,190,38)" fg:x="353" fg:w="1"/><text x="83.9680%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.24%)</title><rect x="83.8480%" y="309" width="0.2375%" height="15" fill="rgb(247,86,24)" fg:x="353" fg:w="1"/><text x="83.9680%" y="319.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.24%)</title><rect x="83.8480%" y="293" width="0.2375%" height="15" fill="rgb(205,101,16)" fg:x="353" fg:w="1"/><text x="83.9680%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.71%)</title><rect x="84.0855%" y="373" width="0.7126%" height="15" fill="rgb(246,168,33)" fg:x="354" fg:w="3"/><text x="84.2055%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.71%)</title><rect x="84.0855%" y="357" width="0.7126%" height="15" fill="rgb(231,114,1)" fg:x="354" fg:w="3"/><text x="84.2055%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.71%)</title><rect x="84.0855%" y="341" width="0.7126%" height="15" fill="rgb(207,184,53)" fg:x="354" fg:w="3"/><text x="84.2055%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.71%)</title><rect x="84.0855%" y="325" width="0.7126%" height="15" fill="rgb(224,95,51)" fg:x="354" fg:w="3"/><text x="84.2055%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.71%)</title><rect x="84.0855%" y="309" width="0.7126%" height="15" fill="rgb(212,188,45)" fg:x="354" fg:w="3"/><text x="84.2055%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.71%)</title><rect x="84.0855%" y="293" width="0.7126%" height="15" fill="rgb(223,154,38)" fg:x="354" fg:w="3"/><text x="84.2055%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (10 samples, 2.38%)</title><rect x="84.0855%" y="421" width="2.3753%" height="15" fill="rgb(251,22,52)" fg:x="354" fg:w="10"/><text x="84.2055%" y="431.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (10 samples, 2.38%)</title><rect x="84.0855%" y="405" width="2.3753%" height="15" fill="rgb(229,209,22)" fg:x="354" fg:w="10"/><text x="84.2055%" y="415.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (10 samples, 2.38%)</title><rect x="84.0855%" y="389" width="2.3753%" height="15" fill="rgb(234,138,34)" fg:x="354" fg:w="10"/><text x="84.2055%" y="399.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (7 samples, 1.66%)</title><rect x="84.7981%" y="373" width="1.6627%" height="15" fill="rgb(212,95,11)" fg:x="357" fg:w="7"/><text x="84.9181%" y="383.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 1.66%)</title><rect x="84.7981%" y="357" width="1.6627%" height="15" fill="rgb(240,179,47)" fg:x="357" fg:w="7"/><text x="84.9181%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 1.66%)</title><rect x="84.7981%" y="341" width="1.6627%" height="15" fill="rgb(240,163,11)" fg:x="357" fg:w="7"/><text x="84.9181%" y="351.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (7 samples, 1.66%)</title><rect x="84.7981%" y="325" width="1.6627%" height="15" fill="rgb(236,37,12)" fg:x="357" fg:w="7"/><text x="84.9181%" y="335.50">has..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (7 samples, 1.66%)</title><rect x="84.7981%" y="309" width="1.6627%" height="15" fill="rgb(232,164,16)" fg:x="357" fg:w="7"/><text x="84.9181%" y="319.50">has..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (7 samples, 1.66%)</title><rect x="84.7981%" y="293" width="1.6627%" height="15" fill="rgb(244,205,15)" fg:x="357" fg:w="7"/><text x="84.9181%" y="303.50">cor..</text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.24%)</title><rect x="86.4608%" y="389" width="0.2375%" height="15" fill="rgb(223,117,47)" fg:x="364" fg:w="1"/><text x="86.5808%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.24%)</title><rect x="86.4608%" y="373" width="0.2375%" height="15" fill="rgb(244,107,35)" fg:x="364" fg:w="1"/><text x="86.5808%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.24%)</title><rect x="86.4608%" y="357" width="0.2375%" height="15" fill="rgb(205,140,8)" fg:x="364" fg:w="1"/><text x="86.5808%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.24%)</title><rect x="86.4608%" y="341" width="0.2375%" height="15" fill="rgb(228,84,46)" fg:x="364" fg:w="1"/><text x="86.5808%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.24%)</title><rect x="86.4608%" y="325" width="0.2375%" height="15" fill="rgb(254,188,9)" fg:x="364" fg:w="1"/><text x="86.5808%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.24%)</title><rect x="86.4608%" y="309" width="0.2375%" height="15" fill="rgb(206,112,54)" fg:x="364" fg:w="1"/><text x="86.5808%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.24%)</title><rect x="86.4608%" y="293" width="0.2375%" height="15" fill="rgb(216,84,49)" fg:x="364" fg:w="1"/><text x="86.5808%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.48%)</title><rect x="86.6983%" y="389" width="0.4751%" height="15" fill="rgb(214,194,35)" fg:x="365" fg:w="2"/><text x="86.8183%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.48%)</title><rect x="86.6983%" y="373" width="0.4751%" height="15" fill="rgb(249,28,3)" fg:x="365" fg:w="2"/><text x="86.8183%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.48%)</title><rect x="86.6983%" y="357" width="0.4751%" height="15" fill="rgb(222,56,52)" fg:x="365" fg:w="2"/><text x="86.8183%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.48%)</title><rect x="86.6983%" y="341" width="0.4751%" height="15" fill="rgb(245,217,50)" fg:x="365" fg:w="2"/><text x="86.8183%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.48%)</title><rect x="86.6983%" y="325" width="0.4751%" height="15" fill="rgb(213,201,24)" fg:x="365" fg:w="2"/><text x="86.8183%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.48%)</title><rect x="86.6983%" y="309" width="0.4751%" height="15" fill="rgb(248,116,28)" fg:x="365" fg:w="2"/><text x="86.8183%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 3.09%)</title><rect x="86.4608%" y="421" width="3.0879%" height="15" fill="rgb(219,72,43)" fg:x="364" fg:w="13"/><text x="86.5808%" y="431.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 3.09%)</title><rect x="86.4608%" y="405" width="3.0879%" height="15" fill="rgb(209,138,14)" fg:x="364" fg:w="13"/><text x="86.5808%" y="415.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (10 samples, 2.38%)</title><rect x="87.1734%" y="389" width="2.3753%" height="15" fill="rgb(222,18,33)" fg:x="367" fg:w="10"/><text x="87.2934%" y="399.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.95%)</title><rect x="88.5986%" y="373" width="0.9501%" height="15" fill="rgb(213,199,7)" fg:x="373" fg:w="4"/><text x="88.7186%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.95%)</title><rect x="88.5986%" y="357" width="0.9501%" height="15" fill="rgb(250,110,10)" fg:x="373" fg:w="4"/><text x="88.7186%" y="367.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (4 samples, 0.95%)</title><rect x="88.5986%" y="341" width="0.9501%" height="15" fill="rgb(248,123,6)" fg:x="373" fg:w="4"/><text x="88.7186%" y="351.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (4 samples, 0.95%)</title><rect x="88.5986%" y="325" width="0.9501%" height="15" fill="rgb(206,91,31)" fg:x="373" fg:w="4"/><text x="88.7186%" y="335.50">h..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.95%)</title><rect x="88.5986%" y="309" width="0.9501%" height="15" fill="rgb(211,154,13)" fg:x="373" fg:w="4"/><text x="88.7186%" y="319.50">c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.24%)</title><rect x="89.5487%" y="421" width="0.2375%" height="15" fill="rgb(225,148,7)" fg:x="377" fg:w="1"/><text x="89.6687%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.24%)</title><rect x="89.5487%" y="405" width="0.2375%" height="15" fill="rgb(220,160,43)" fg:x="377" fg:w="1"/><text x="89.6687%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.24%)</title><rect x="89.5487%" y="389" width="0.2375%" height="15" fill="rgb(213,52,39)" fg:x="377" fg:w="1"/><text x="89.6687%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.24%)</title><rect x="89.5487%" y="373" width="0.2375%" height="15" fill="rgb(243,137,7)" fg:x="377" fg:w="1"/><text x="89.6687%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.24%)</title><rect x="89.5487%" y="357" width="0.2375%" height="15" fill="rgb(230,79,13)" fg:x="377" fg:w="1"/><text x="89.6687%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.24%)</title><rect x="89.5487%" y="341" width="0.2375%" height="15" fill="rgb(247,105,23)" fg:x="377" fg:w="1"/><text x="89.6687%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.24%)</title><rect x="89.5487%" y="325" width="0.2375%" height="15" fill="rgb(223,179,41)" fg:x="377" fg:w="1"/><text x="89.6687%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (38 samples, 9.03%)</title><rect x="89.7862%" y="421" width="9.0261%" height="15" fill="rgb(218,9,34)" fg:x="378" fg:w="38"/><text x="89.9062%" y="431.50">std::collections::hash::set::..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (38 samples, 9.03%)</title><rect x="89.7862%" y="405" width="9.0261%" height="15" fill="rgb(222,106,8)" fg:x="378" fg:w="38"/><text x="89.9062%" y="415.50">hashbrown::set::HashSet&lt;T,S,A..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (38 samples, 9.03%)</title><rect x="89.7862%" y="389" width="9.0261%" height="15" fill="rgb(211,220,0)" fg:x="378" fg:w="38"/><text x="89.9062%" y="399.50">hashbrown::map::HashMap&lt;K,V,S..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (38 samples, 9.03%)</title><rect x="89.7862%" y="373" width="9.0261%" height="15" fill="rgb(229,52,16)" fg:x="378" fg:w="38"/><text x="89.9062%" y="383.50">hashbrown::map::HashMap&lt;K,V,S..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (38 samples, 9.03%)</title><rect x="89.7862%" y="357" width="9.0261%" height="15" fill="rgb(212,155,18)" fg:x="378" fg:w="38"/><text x="89.9062%" y="367.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (38 samples, 9.03%)</title><rect x="89.7862%" y="341" width="9.0261%" height="15" fill="rgb(242,21,14)" fg:x="378" fg:w="38"/><text x="89.9062%" y="351.50">hashbrown::raw::RawTable&lt;T,A&gt;..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (38 samples, 9.03%)</title><rect x="89.7862%" y="325" width="9.0261%" height="15" fill="rgb(222,19,48)" fg:x="378" fg:w="38"/><text x="89.9062%" y="335.50">hashbrown::raw::RawTableInner..</text></g><g><title>hashbrown::raw::sse2::Group::load (38 samples, 9.03%)</title><rect x="89.7862%" y="309" width="9.0261%" height="15" fill="rgb(232,45,27)" fg:x="378" fg:w="38"/><text x="89.9062%" y="319.50">hashbrown::raw::sse2::Group::..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (38 samples, 9.03%)</title><rect x="89.7862%" y="293" width="9.0261%" height="15" fill="rgb(249,103,42)" fg:x="378" fg:w="38"/><text x="89.9062%" y="303.50">core::core_arch::x86::sse2::_..</text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 9.03%)</title><rect x="89.7862%" y="277" width="9.0261%" height="15" fill="rgb(246,81,33)" fg:x="378" fg:w="38"/><text x="89.9062%" y="287.50">core::intrinsics::copy_nonove..</text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.24%)</title><rect x="98.8124%" y="373" width="0.2375%" height="15" fill="rgb(252,33,42)" fg:x="416" fg:w="1"/><text x="98.9324%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.24%)</title><rect x="98.8124%" y="357" width="0.2375%" height="15" fill="rgb(209,212,41)" fg:x="416" fg:w="1"/><text x="98.9324%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.24%)</title><rect x="98.8124%" y="341" width="0.2375%" height="15" fill="rgb(207,154,6)" fg:x="416" fg:w="1"/><text x="98.9324%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.24%)</title><rect x="98.8124%" y="325" width="0.2375%" height="15" fill="rgb(223,64,47)" fg:x="416" fg:w="1"/><text x="98.9324%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.24%)</title><rect x="98.8124%" y="309" width="0.2375%" height="15" fill="rgb(211,161,38)" fg:x="416" fg:w="1"/><text x="98.9324%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.24%)</title><rect x="98.8124%" y="293" width="0.2375%" height="15" fill="rgb(219,138,40)" fg:x="416" fg:w="1"/><text x="98.9324%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.24%)</title><rect x="98.8124%" y="277" width="0.2375%" height="15" fill="rgb(241,228,46)" fg:x="416" fg:w="1"/><text x="98.9324%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.24%)</title><rect x="98.8124%" y="261" width="0.2375%" height="15" fill="rgb(223,209,38)" fg:x="416" fg:w="1"/><text x="98.9324%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.24%)</title><rect x="98.8124%" y="245" width="0.2375%" height="15" fill="rgb(236,164,45)" fg:x="416" fg:w="1"/><text x="98.9324%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.24%)</title><rect x="98.8124%" y="229" width="0.2375%" height="15" fill="rgb(231,15,5)" fg:x="416" fg:w="1"/><text x="98.9324%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.24%)</title><rect x="99.0499%" y="373" width="0.2375%" height="15" fill="rgb(252,35,15)" fg:x="417" fg:w="1"/><text x="99.1699%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.24%)</title><rect x="99.0499%" y="357" width="0.2375%" height="15" fill="rgb(248,181,18)" fg:x="417" fg:w="1"/><text x="99.1699%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.24%)</title><rect x="99.0499%" y="341" width="0.2375%" height="15" fill="rgb(233,39,42)" fg:x="417" fg:w="1"/><text x="99.1699%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.24%)</title><rect x="99.0499%" y="325" width="0.2375%" height="15" fill="rgb(238,110,33)" fg:x="417" fg:w="1"/><text x="99.1699%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.24%)</title><rect x="99.0499%" y="309" width="0.2375%" height="15" fill="rgb(233,195,10)" fg:x="417" fg:w="1"/><text x="99.1699%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.24%)</title><rect x="99.0499%" y="293" width="0.2375%" height="15" fill="rgb(254,105,3)" fg:x="417" fg:w="1"/><text x="99.1699%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.24%)</title><rect x="99.2874%" y="357" width="0.2375%" height="15" fill="rgb(221,225,9)" fg:x="418" fg:w="1"/><text x="99.4074%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.24%)</title><rect x="99.2874%" y="341" width="0.2375%" height="15" fill="rgb(224,227,45)" fg:x="418" fg:w="1"/><text x="99.4074%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.24%)</title><rect x="99.2874%" y="325" width="0.2375%" height="15" fill="rgb(229,198,43)" fg:x="418" fg:w="1"/><text x="99.4074%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.24%)</title><rect x="99.2874%" y="309" width="0.2375%" height="15" fill="rgb(206,209,35)" fg:x="418" fg:w="1"/><text x="99.4074%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.24%)</title><rect x="99.2874%" y="293" width="0.2375%" height="15" fill="rgb(245,195,53)" fg:x="418" fg:w="1"/><text x="99.4074%" y="303.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.24%)</title><rect x="99.2874%" y="277" width="0.2375%" height="15" fill="rgb(240,92,26)" fg:x="418" fg:w="1"/><text x="99.4074%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.24%)</title><rect x="99.2874%" y="261" width="0.2375%" height="15" fill="rgb(207,40,23)" fg:x="418" fg:w="1"/><text x="99.4074%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.24%)</title><rect x="99.2874%" y="245" width="0.2375%" height="15" fill="rgb(223,111,35)" fg:x="418" fg:w="1"/><text x="99.4074%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.24%)</title><rect x="99.2874%" y="229" width="0.2375%" height="15" fill="rgb(229,147,28)" fg:x="418" fg:w="1"/><text x="99.4074%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.24%)</title><rect x="99.2874%" y="213" width="0.2375%" height="15" fill="rgb(211,29,28)" fg:x="418" fg:w="1"/><text x="99.4074%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.24%)</title><rect x="99.2874%" y="197" width="0.2375%" height="15" fill="rgb(228,72,33)" fg:x="418" fg:w="1"/><text x="99.4074%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.24%)</title><rect x="99.2874%" y="181" width="0.2375%" height="15" fill="rgb(205,214,31)" fg:x="418" fg:w="1"/><text x="99.4074%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.24%)</title><rect x="99.2874%" y="165" width="0.2375%" height="15" fill="rgb(224,111,15)" fg:x="418" fg:w="1"/><text x="99.4074%" y="175.50"></text></g><g><title>all (421 samples, 100%)</title><rect x="0.0000%" y="1285" width="100.0000%" height="15" fill="rgb(253,21,26)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1295.50"></text></g><g><title>fmrs (421 samples, 100.00%)</title><rect x="0.0000%" y="1269" width="100.0000%" height="15" fill="rgb(245,139,43)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1279.50">fmrs</text></g><g><title>_start (421 samples, 100.00%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(252,170,7)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1263.50">_start</text></g><g><title>__libc_start_main (421 samples, 100.00%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(231,118,14)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1247.50">__libc_start_main</text></g><g><title>main (421 samples, 100.00%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(238,83,0)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1231.50">main</text></g><g><title>std::rt::lang_start_internal (421 samples, 100.00%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1215.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (421 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1199.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (421 samples, 100.00%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(222,165,49)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1183.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (421 samples, 100.00%)</title><rect x="0.0000%" y="1157" width="100.0000%" height="15" fill="rgb(219,113,52)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1167.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(214,7,15)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1151.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (421 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(235,32,4)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1135.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (421 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(238,90,54)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1119.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (421 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(213,208,19)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1103.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (421 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(233,156,4)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1087.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(207,194,5)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1071.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (421 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(206,111,30)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1055.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (421 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(243,70,54)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1039.50">core::ops::function::FnOnce::call_once</text></g><g><title>fmrs::main (421 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(242,28,8)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1023.50">fmrs::main</text></g><g><title>actix_rt::system::SystemRunner::block_on (421 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(219,106,18)" fg:x="0" fg:w="421"/><text x="0.1200%" y="1007.50">actix_rt::system::SystemRunner::block_on</text></g><g><title>actix_rt::runtime::Runtime::block_on (421 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(244,222,10)" fg:x="0" fg:w="421"/><text x="0.1200%" y="991.50">actix_rt::runtime::Runtime::block_on</text></g><g><title>tokio::task::local::LocalSet::block_on (421 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="421"/><text x="0.1200%" y="975.50">tokio::task::local::LocalSet::block_on</text></g><g><title>tokio::runtime::Runtime::block_on (421 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(213,23,39)" fg:x="0" fg:w="421"/><text x="0.1200%" y="959.50">tokio::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::basic_scheduler::BasicScheduler::block_on (421 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(238,48,10)" fg:x="0" fg:w="421"/><text x="0.1200%" y="943.50">tokio::runtime::basic_scheduler::BasicScheduler::block_on</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on (421 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(251,196,23)" fg:x="0" fg:w="421"/><text x="0.1200%" y="927.50">tokio::runtime::basic_scheduler::CoreGuard::block_on</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::enter (421 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(250,152,24)" fg:x="0" fg:w="421"/><text x="0.1200%" y="911.50">tokio::runtime::basic_scheduler::CoreGuard::enter</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (421 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(209,150,17)" fg:x="0" fg:w="421"/><text x="0.1200%" y="895.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::enter::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(234,202,34)" fg:x="0" fg:w="421"/><text x="0.1200%" y="879.50">tokio::runtime::basic_scheduler::CoreGuard::enter::{{closure}}</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(253,148,53)" fg:x="0" fg:w="421"/><text x="0.1200%" y="863.50">tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}</text></g><g><title>tokio::runtime::basic_scheduler::Context::enter (421 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(218,129,16)" fg:x="0" fg:w="421"/><text x="0.1200%" y="847.50">tokio::runtime::basic_scheduler::Context::enter</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(216,85,19)" fg:x="0" fg:w="421"/><text x="0.1200%" y="831.50">tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}}</text></g><g><title>tokio::coop::budget (421 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(235,228,7)" fg:x="0" fg:w="421"/><text x="0.1200%" y="815.50">tokio::coop::budget</text></g><g><title>tokio::coop::with_budget (421 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(245,175,0)" fg:x="0" fg:w="421"/><text x="0.1200%" y="799.50">tokio::coop::with_budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (421 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(208,168,36)" fg:x="0" fg:w="421"/><text x="0.1200%" y="783.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (421 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(246,171,24)" fg:x="0" fg:w="421"/><text x="0.1200%" y="767.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::coop::with_budget::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(215,142,24)" fg:x="0" fg:w="421"/><text x="0.1200%" y="751.50">tokio::coop::with_budget::{{closure}}</text></g><g><title>tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(250,187,7)" fg:x="0" fg:w="421"/><text x="0.1200%" y="735.50">tokio::runtime::basic_scheduler::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (421 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(228,66,33)" fg:x="0" fg:w="421"/><text x="0.1200%" y="719.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (421 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(234,215,21)" fg:x="0" fg:w="421"/><text x="0.1200%" y="703.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(222,191,20)" fg:x="0" fg:w="421"/><text x="0.1200%" y="687.50">tokio::task::local::LocalSet::run_until::{{closure}}</text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll (421 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(245,79,54)" fg:x="0" fg:w="421"/><text x="0.1200%" y="671.50">&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::task::local::LocalSet::with (421 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(240,10,37)" fg:x="0" fg:w="421"/><text x="0.1200%" y="655.50">tokio::task::local::LocalSet::with</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (421 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(214,192,32)" fg:x="0" fg:w="421"/><text x="0.1200%" y="639.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(209,36,54)" fg:x="0" fg:w="421"/><text x="0.1200%" y="623.50">&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}}</text></g><g><title>tokio::coop::budget (421 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(220,10,11)" fg:x="0" fg:w="421"/><text x="0.1200%" y="607.50">tokio::coop::budget</text></g><g><title>tokio::coop::with_budget (421 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(221,106,17)" fg:x="0" fg:w="421"/><text x="0.1200%" y="591.50">tokio::coop::with_budget</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (421 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(251,142,44)" fg:x="0" fg:w="421"/><text x="0.1200%" y="575.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (421 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(238,13,15)" fg:x="0" fg:w="421"/><text x="0.1200%" y="559.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>tokio::coop::with_budget::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(208,107,27)" fg:x="0" fg:w="421"/><text x="0.1200%" y="543.50">tokio::coop::with_budget::{{closure}}</text></g><g><title>&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}}::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(205,136,37)" fg:x="0" fg:w="421"/><text x="0.1200%" y="527.50">&lt;tokio::task::local::RunUntil&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}}::{{closure}}</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (421 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(250,205,27)" fg:x="0" fg:w="421"/><text x="0.1200%" y="511.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>fmrs::main::{{closure}} (421 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(210,80,43)" fg:x="0" fg:w="421"/><text x="0.1200%" y="495.50">fmrs::main::{{closure}}</text></g><g><title>fmrs::command::bench::bench (421 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(247,160,36)" fg:x="0" fg:w="421"/><text x="0.1200%" y="479.50">fmrs::command::bench::bench</text></g><g><title>fmrs::solver::solve (421 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(234,13,49)" fg:x="0" fg:w="421"/><text x="0.1200%" y="463.50">fmrs::solver::solve</text></g><g><title>fmrs::solver::solve_with_progress (421 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(234,122,0)" fg:x="0" fg:w="421"/><text x="0.1200%" y="447.50">fmrs::solver::solve_with_progress</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (5 samples, 1.19%)</title><rect x="98.8124%" y="421" width="1.1876%" height="15" fill="rgb(207,146,38)" fg:x="416" fg:w="5"/><text x="98.9324%" y="431.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (5 samples, 1.19%)</title><rect x="98.8124%" y="405" width="1.1876%" height="15" fill="rgb(207,177,25)" fg:x="416" fg:w="5"/><text x="98.9324%" y="415.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 1.19%)</title><rect x="98.8124%" y="389" width="1.1876%" height="15" fill="rgb(211,178,42)" fg:x="416" fg:w="5"/><text x="98.9324%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (3 samples, 0.71%)</title><rect x="99.2874%" y="373" width="0.7126%" height="15" fill="rgb(230,69,54)" fg:x="418" fg:w="3"/><text x="99.4074%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (2 samples, 0.48%)</title><rect x="99.5249%" y="357" width="0.4751%" height="15" fill="rgb(214,135,41)" fg:x="419" fg:w="2"/><text x="99.6449%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (2 samples, 0.48%)</title><rect x="99.5249%" y="341" width="0.4751%" height="15" fill="rgb(237,67,25)" fg:x="419" fg:w="2"/><text x="99.6449%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (2 samples, 0.48%)</title><rect x="99.5249%" y="325" width="0.4751%" height="15" fill="rgb(222,189,50)" fg:x="419" fg:w="2"/><text x="99.6449%" y="335.50"></text></g></svg></svg>